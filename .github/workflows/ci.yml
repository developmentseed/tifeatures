name: CI

# On every pull request, but only on push to master
on:
  push:
    branches:
    - master
    tags:
    - '*'
    paths:
      # Only run test and docker publish if somde code have changed
      - 'pyproject.toml'
      - 'tifeatures/**'
      - 'tests/**'
      - '.pre-commit-config.yaml'
      - 'dockerfiles/**'
      - .github/workflows/ci.yml
  pull_request:
env:
  LATEST_PY_VERSION: '3.10'

jobs:
  tests:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: install lib postgres
        run: |
          sudo apt update
          wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O- | sudo apt-key add -
          echo "deb [arch=amd64] http://apt.postgresql.org/pub/repos/apt/ focal-pgdg main" | sudo tee /etc/apt/sources.list.d/postgresql.list
          sudo apt update
          sudo apt-get install --yes libpq-dev postgis postgresql-14-postgis-3

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .["all,test"]

      - name: Run pre-commit
        if: ${{ matrix.python-version == env.LATEST_PY_VERSION }}
        run: |
          python -m pip install pre-commit
          pre-commit run --all-files

      - name: Run tests
        run: python -m pytest --cov tifeatures --cov-report xml --cov-report term-missing --asyncio-mode=strict

      - name: Upload Results
        if: ${{ matrix.python-version == env.LATEST_PY_VERSION }}
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          flags: unittests
          name: ${{ matrix.python-version }}
          fail_ci_if_error: false

  benchmark:
    needs: [tests]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LATEST_PY_VERSION }}

      - name: install lib postgres
        run: |
          sudo apt update
          wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O- | sudo apt-key add -
          echo "deb [arch=amd64] http://apt.postgresql.org/pub/repos/apt/ focal-pgdg main" | sudo tee /etc/apt/sources.list.d/postgresql.list
          sudo apt update
          sudo apt-get install --yes libpq-dev postgis postgresql-14-postgis-3

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .["test"]

      - name: Run Benchmark
        run: python -m pytest tests/benchmarks.py --benchmark-only --benchmark-columns 'min, max, mean, median' --benchmark-json output.json --asyncio-mode=strict

      # - name: Store and benchmark result
      #   uses: benchmark-action/github-action-benchmark@v1
      #   with:
      #     name: TiFeatures Benchmarks
      #     tool: 'pytest'
      #     output-file-path: output.json
      #     alert-threshold: '130%'
      #     comment-on-alert: true
      #     fail-on-alert: true
      #     # GitHub API token to make a commit comment
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     # Make a commit on `gh-pages` only if master
      #     auto-push: ${{ github.ref == 'refs/heads/master' }}
      #     benchmark-data-dir-path: benchmarks

  publish:
    needs: [tests]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags') && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LATEST_PY_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install hatch
          python -m hatch build

      - name: Set tag version
        id: tag
        run: |
          echo "version=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Set module version
        id: module
        run: |
          echo "version=$(hatch --quiet version)" >> $GITHUB_OUTPUT

      - name: Build and publish
        if: ${{ steps.tag.outputs.version }} == ${{ steps.module.outputs.version}}
        env:
          HATCH_INDEX_USER: ${{ secrets.PYPI_USERNAME }}
          HATCH_INDEX_AUTH: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m hatch publish

  publish-docker:
    needs: [tests]
    if: github.ref == 'refs/heads/master' || startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Github
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set tag version
        id: tag
        # https://stackoverflow.com/questions/58177786/get-the-current-pushed-tag-in-github-actions
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      # Push `latest` when commiting to master
      - name: Build and push
        if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          file: dockerfiles/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest

      # Push `{VERSION}` when pushing a new tag
      - name: Build and push
        if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          file: dockerfiles/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.tag }}
