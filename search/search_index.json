{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TiFeatures","text":"<p> <p>Simple and Fast Geospatial Features API for PostGIS.</p> </p> <p> </p> <p>Documentation: developmentseed.org/tifeatures/</p> <p>Source Code: developmentseed/tifeatures</p> <p> This project is on pause while we focus on <code>developmentseed/tipg</code> </p> <p>ref: developmentseed/timvt?96</p> <p><code>TiFeatures</code>, pronounced T[ee]Features, is a python package which helps creating lightweight Features server for PostGIS Database. The API has been designed with respect to OGC Features API specification.</p>"},{"location":"#install","title":"Install","text":"<pre><code>$ python -m pip install pip -U\n$ python -m pip install tifeatures\n\n# or from source\n$ git clone https://github.com/developmentseed/tifeatures.git\n$ cd tifeatures\n$ python -m pip install -e .\n</code></pre>"},{"location":"#ogc-specification","title":"OGC Specification","text":"Specification Status link Part 1: Core \u2705 docs.ogc.org/is/17-069r4/17-069r4.html Part 2: CRS by Reference \u274c docs.ogc.org/is/18-058r1/18-058r1.html Part 3: Filtering / CQL2 \u2705 docs.ogc.org/DRAFTS/19-079r1.html <p>Notes:</p> <p>The project authors choose not to implement the Part 2 of the specification to avoid the introduction of CRS based GeoJSON. This might change in the future.</p> <p>While the authors tried to follow the specification (part 1 and 3) to the letter, some API endpoints might have more capabilities (e.g geometry column selection).</p>"},{"location":"#postgispostgresql","title":"PostGIS/PostgreSQL","text":"<p><code>TiFeatures</code> rely a lot of <code>ST_*</code> PostGIS functions. You need to make sure your PostgreSQL database has PostGIS installed.</p> <pre><code>SELECT name, default_version,installed_version\nFROM pg_available_extensions WHERE name LIKE 'postgis%' or name LIKE 'address%';\n</code></pre> <pre><code>CREATE EXTENSION postgis;\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>To be able to work, the application will need access to the database. <code>tifeatures</code> uses starlette's configuration pattern which make use of environment variable and/or <code>.env</code> file to pass variable to the application.</p> <p>Example of <code>.env</code> file can be found in .env.example</p> <pre><code># you need define the DATABASE_URL directly\nDATABASE_URL=postgresql://username:password@0.0.0.0:5432/postgis\n</code></pre>"},{"location":"#launch","title":"Launch","text":"<pre><code>$ pip install uvicorn\n\n# Set your postgis database instance URL in the environment\n$ export DATABASE_URL=postgresql://username:password@0.0.0.0:5432/postgis\n$ uvicorn tifeatures.main:app\n\n# or using Docker\n\n$ docker-compose up\n</code></pre>"},{"location":"#contribution-development","title":"Contribution &amp; Development","text":"<p>See CONTRIBUTING.md</p>"},{"location":"#license","title":"License","text":"<p>See LICENSE</p>"},{"location":"#authors","title":"Authors","text":"<p>Created by Development Seed</p>"},{"location":"#changes","title":"Changes","text":"<p>See CHANGES.md.</p>"},{"location":"contributing/","title":"Development - Contributing","text":"<p>Issues and pull requests are more than welcome: github.com/developmentseed/tifeatures/issues</p> <p>dev install</p> <pre><code>$ git clone https://github.com/developmentseed/tifeatures.git\n$ cd tifeatures\n$ pip install -e .[\"test,dev\"]\n</code></pre> <p>You can then run the tests with the following command:</p> <pre><code>python -m pytest --cov tifeatures --cov-report term-missing --asyncio-mode=strict\n</code></pre> <p>and run benchmark</p> <pre><code>python -m pytest tests/benchmarks.py --benchmark-only --benchmark-columns 'min, max, mean, median' --asyncio-mode=strict\n</code></pre> <p>pre-commit</p> <p>This repo is set to use <code>pre-commit</code> to run isort, flake8, pydocstring, black (\"uncompromising Python code formatter\") and mypy when committing new code.</p> <pre><code># Install pre-commit command\n$ pip install pre-commit\n\n# Setup pre-commit withing your local environment\n$ pre-commit install\n</code></pre>"},{"location":"endpoints/","title":"Endpoints","text":""},{"location":"endpoints/#landing-page","title":"Landing page","text":"<p>Path: <code>/</code></p> <p>QueryParams:</p> <ul> <li>f (str, one of [<code>json</code>, <code>html</code>]): Select response MediaType.</li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/json</code>, <code>text/html</code>]): Select response MediaType.</li> </ul> <p>Example:</p> <pre><code>curl http://127.0.0.1:8081 | jq\n{\n\"title\": \"TiFeatures\",\n\"links\": [\n{\n\"href\": \"http://127.0.0.1:8081/\",\n\"rel\": \"self\",\n\"type\": \"application/json\",\n\"title\": \"Landing Page\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/api\",\n\"rel\": \"service-desc\",\n\"type\": \"application/vnd.oai.openapi+json;version=3.0\",\n\"title\": \"the API definition (JSON)\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/api.html\",\n\"rel\": \"service-doc\",\n\"type\": \"text/html\",\n\"title\": \"the API documentation\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/conformance\",\n\"rel\": \"conformance\",\n\"type\": \"application/json\",\n\"title\": \"Conformance\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/collections\",\n\"rel\": \"data\",\n\"type\": \"application/json\",\n\"title\": \"List of Collections\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/collections/{collectionId}\",\n\"rel\": \"data\",\n\"type\": \"application/json\",\n\"title\": \"Collection metadata\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/collections/{collectionId}/queryables\",\n\"rel\": \"queryables\",\n\"type\": \"application/schema+json\",\n\"title\": \"Collection queryables\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/collections/{collectionId}/items\",\n\"rel\": \"data\",\n\"type\": \"application/geo+json\",\n\"title\": \"Collection Features\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/collections/{collectionId}/items/{itemId}\",\n\"rel\": \"data\",\n\"type\": \"application/geo+json\",\n\"title\": \"Collection Feature\"\n}\n]\n}\n</code></pre> <p>Ref: docs.ogc.org/is/17-069r4/17-069r4.html#_api_landing_page</p>"},{"location":"endpoints/#conformance-declaration","title":"Conformance declaration","text":"<p>Path: <code>/conformance</code></p> <p>QueryParams:</p> <ul> <li>f (str, one of [<code>json</code>, <code>html</code>]): Select response MediaType.</li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/json</code>, <code>text/html</code>])): Select response MediaType.</li> </ul> <p>Example:</p> <pre><code>curl http://127.0.0.1:8081/conformance | jq\n{\n\"conformsTo\": [\n\"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\",\n\"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas3\",\n\"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\",\n\"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html\",\n\"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core\",\n\"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/landing-page\",\n\"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/json\",\n\"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/html\",\n\"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/oas30\",\n\"http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/collections\",\n\"http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/simple-query\",\n\"http://www.opengis.net/spec/ogcapi-features-3/1.0/conf/filter,\",\n\"http://www.opengis.net/def/rel/ogc/1.0/queryables\"\n]\n}\n</code></pre> <p>Ref: docs.ogc.org/is/17-069r4/17-069r4.html#_declaration_of_conformance_classes</p>"},{"location":"endpoints/#list-feature-collections","title":"List Feature Collections","text":"<p>Path: <code>/collections</code></p> <p>QueryParams:</p> <ul> <li>f (str, one of [<code>json</code>, <code>html</code>]): Select response MediaType.</li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/json</code>, <code>text/html</code>])): Select response MediaType.</li> </ul> <p>Example:</p> <pre><code>curl http://127.0.0.1:8081/collections | jq\n{\n\"collections\": [\n{\n\"id\": \"public.countries\",\n\"title\": \"public.countries\",\n\"links\": [\n{\n\"href\": \"http://127.0.0.1:8081/collections/public.countries\",\n\"rel\": \"collection\",\n\"type\": \"application/json\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/collections/public.countries/items\",\n\"rel\": \"items\",\n\"type\": \"application/geo+json\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/collections/public.countries/queryables\",\n\"rel\": \"queryables\",\n\"type\": \"application/schema+json\"\n}\n],\n\"itemType\": \"feature\",\n\"crs\": [\n\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n]\n},\n...\n],\n\"links\": [\n{\n\"href\": \"http://127.0.0.1:8081/\",\n\"rel\": \"parent\",\n\"type\": \"application/json\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/collections\",\n\"rel\": \"self\",\n\"type\": \"application/json\"\n}\n]\n}\n</code></pre> <p>Ref: docs.ogc.org/is/17-069r4/17-069r4.html#_collections_</p>"},{"location":"endpoints/#feature-collections-metadata","title":"Feature Collection's Metadata","text":"<p>Path: <code>/collections/{collectionId}</code></p> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> </ul> <p>QueryParams:</p> <ul> <li>f (str, one of [<code>json</code>, <code>html</code>]): Select response MediaType.</li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/json</code>, <code>text/html</code>])): Select response MediaType.</li> </ul> <p>Example:</p> <pre><code>curl http://127.0.0.1:8081/collections/public.countries | jq\n{\n\"id\": \"public.countries\",\n\"links\": [\n{\n\"href\": \"http://127.0.0.1:8081/collections/public.countries\",\n\"rel\": \"self\",\n\"type\": \"application/json\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/collections/public.countries/items\",\n\"rel\": \"items\",\n\"type\": \"application/geo+json\",\n\"title\": \"Items\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/collections/public.countries/items?f=csv\",\n\"rel\": \"alternate\",\n\"type\": \"text/csv\",\n\"title\": \"Items (CSV)\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/collections/public.countries/items?f=geojsonseq\",\n\"rel\": \"alternate\",\n\"type\": \"application/geo+json-seq\",\n\"title\": \"Items (GeoJSONSeq)\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/collections/public.countries/queryables\",\n\"rel\": \"queryables\",\n\"type\": \"application/schema+json\",\n\"title\": \"Queryables\"\n}\n],\n\"itemType\": \"feature\",\n\"crs\": [\n\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n]\n}\n</code></pre> <p>Ref: docs.ogc.org/is/17-069r4/17-069r4.html#_collection_</p>"},{"location":"endpoints/#feature-collections-queryables","title":"Feature Collection's Queryables","text":"<p>Path: <code>/collections/{collectionId}/queryables</code></p> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> </ul> <p>QueryParams:</p> <ul> <li>f (str, one of [<code>json</code>, <code>html</code>]): Select response MediaType.</li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/json</code>, <code>text/html</code>])): Select response MediaType.</li> </ul> <p>Example:</p> <pre><code>curl http://127.0.0.1:8081/collections/public.landsat_wrs/queryables | jq\n{\n\"title\": \"public.landsat_wrs\",\n\"properties\": {\n\"geom\": {\n\"$ref\": \"https://geojson.org/schema/Geometry.json\"\n},\n\"ogc_fid\": {\n\"name\": \"ogc_fid\",\n\"type\": \"number\"\n},\n\"id\": {\n\"name\": \"id\",\n\"type\": \"string\"\n},\n\"pr\": {\n\"name\": \"pr\",\n\"type\": \"string\"\n},\n\"path\": {\n\"name\": \"path\",\n\"type\": \"number\"\n},\n\"row\": {\n\"name\": \"row\",\n\"type\": \"number\"\n}\n},\n\"type\": \"object\",\n\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\n\"$id\": \"http://127.0.0.1:8081/collections/public.landsat_wrs/queryables\"\n}\n</code></pre> <p>Ref: docs.ogc.org/DRAFTS/19-079r1.html#filter-queryables</p>"},{"location":"endpoints/#features","title":"Features","text":"<p>Path: <code>/collections/{collectionId}/items</code></p> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> </ul> <p>QueryParams:</p> <ul> <li>limit (int): Limits the number of features in the response. Defaults to 10.</li> <li>offset (int): Features offset.</li> <li>bbox (str): Coma (,) delimited bbox coordinates to spatially filter features in <code>minx,miny,maxx,maxy</code> form.</li> <li> <p>datetime (str): Single datetime or <code>/</code> delimited datetime intervals to temporally filter features.</p> <ul> <li>interval-bounded            = <code>date-time/date-time</code></li> <li>interval-half-bounded-start = <code>../date-time</code></li> <li>interval-half-bounded-end   = <code>date-time/..</code></li> <li>datetime                    = <code>date-time</code></li> </ul> </li> <li> <p>ids * (str): Coma (,) delimited list of item Ids.</p> </li> <li>properties * (str): Coma (,) delimited list of item properties to return in each feature.</li> <li>filter (str): CQL2 filter as defined by docs.ogc.org/DRAFTS/19-079r1.html#rc_filter</li> <li>filter-lang (str, one of [<code>cql2-text</code>, <code>cql2-json</code>]): <code>Filter</code> language. Defaults to <code>cql2-text</code>.</li> <li>geom-column * (str): Select geometry column to apply filter on and to create geometry from.</li> <li>datetime-column * (str): Select datetime column to apply filter on.</li> <li>bbox-only  * (bool): Only return the bounding box of the feature.</li> <li> <p>simplify * (float): Simplify the output geometry to given threshold in decimal degrees.</p> </li> <li> <p>f (str, one of [<code>geojson</code>, <code>html</code>, <code>json</code>, <code>csv</code>, <code>geojsonseq</code>, <code>ndjson</code>]): Select response MediaType.</p> </li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/geo+json</code>, <code>text/html</code>, <code>application/json</code>, <code>text/csv</code>, <code>application/geo+json-seq</code>, <code>application/ndjson</code>])): Select response MediaType.</li> </ul> <p>*  Not in OGC API Features Specification</p> <p>Important</p> <p>Additional query-parameters (form <code>PROP=VALUE</code>) will be considered as a property filter. Properties (<code>PROP</code>) not matching collection's column will be ignored.</p> <p>Example:</p> <ul> <li><code>http://127.0.0.1:8081/collections/public.countries/items</code></li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?limit=1</code> limit to only 1 feature</li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?limit=1&amp;offset=2</code> limit to only 1 feature and add offset 2 (return the third feature of the collection)</li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?bbox=-94.702148,34.488448,-85.429688,41.112469</code> limit result to a specific bbox.</li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?ids=1,2,3</code> limit result to ids <code>1</code>, <code>2</code> and <code>3</code></li> <li> <p><code>http://127.0.0.1:8081/collections/public.countries/items?properties=name</code> only return <code>name</code> property</p> </li> <li> <p>Property Filter</p> </li> <li> <p><code>http://127.0.0.1:8081/collections/public.countries/items?name=Zimbabwe</code> only return features where property <code>name==Zimbabwe</code></p> </li> <li> <p>Datetime</p> </li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?datetime=2004-10-19T10:23:54Z</code> return features with datetime column with value <code>==2004-10-19T10:23:54Z</code>.</li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?datetime=../2004-10-19T10:23:54Z</code> return features with datetime column with value <code>&lt;=2004-10-19T10:23:54Z</code>.</li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?datetime=2004-10-19T10:23:54Z/..</code> return features with datetime column with value <code>&gt;=2004-10-19T10:23:54Z</code>.</li> <li> <p><code>http://127.0.0.1:8081/collections/public.countries/items?datetime=2004-10-19T10:23:54Z/2004-10-20T10:23:54Z</code> return features with datetime column with value between <code>2004-10-19T10:23:54Z</code> and <code>2004-10-20T10:23:54Z</code>.</p> </li> <li> <p>CQL2</p> </li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?filter-lang=cql2-json&amp;filter={\"op\":\"=\",\"args\":[{\"property\":\"ogc_fid\"},1]}</code></li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?filter-lang=cql2-text&amp;filter=ogc_fid=1</code></li> </ul> <p>Ref: docs.ogc.org/is/17-069r4/17-069r4.html#_items_ and docs.ogc.org/DRAFTS/19-079r1.html#filter-param</p>"},{"location":"endpoints/#feature","title":"Feature","text":"<p>Path: <code>/collections/{collectionId}/items/{itemId}</code></p> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> <li>itemId (str): Feature Id</li> </ul> <p>QueryParams: - geom-column * (str): Select geometry column to create geometry from. - bbox-only  * (bool): Only return the bounding box of the feature. - simplify * (float): Simplify the output geometry to given threshold in decimal degrees.</p> <ul> <li>f (str, one of [<code>geojson</code>, <code>html</code>, <code>json</code>]): Select response MediaType.</li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/geo+json</code>, <code>text/html</code>, <code>application/json</code>])): Select response MediaType.</li> </ul> <p>Example:</p> <pre><code>{\n\"type\": \"Feature\",\n\"geometry\": {\n\"coordinates\": [...]\n\"type\": \"MultiPolygon\"\n},\n\"properties\": {\n\"gid\": 1,\n\"name\": \"Zimbabwe\",\n...\n},\n\"id\": \"1\",\n\"links\": [\n{\n\"href\": \"http://127.0.0.1:8081/collections/public.countries\",\n\"rel\": \"collection\",\n\"type\": \"application/json\"\n},\n{\n\"href\": \"http://127.0.0.1:8081/collections/public.countries/items/1\",\n\"rel\": \"self\",\n\"type\": \"application/geo+json\"\n}\n]\n}\n</code></pre> <p>Ref: docs.ogc.org/is/17-069r4/17-069r4.html#_feature_</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#010a4-2023-03-15","title":"0.1.0a4 (2023-03-15)","text":"<ul> <li>fix factories <code>url_for</code> type (for starlette &gt;=0.26)</li> </ul>"},{"location":"release-notes/#010a3-2023-02-27","title":"0.1.0a3 (2023-02-27)","text":"<ul> <li>fix CRS for collection and extent (switch from <code>epsg4326</code> to <code>CRS84</code>)</li> </ul>"},{"location":"release-notes/#010a2-2022-11-21","title":"0.1.0a2 (2022-11-21)","text":"<ul> <li>fix package metadata</li> </ul>"},{"location":"release-notes/#010a0-2022-11-16","title":"0.1.0a0 (2022-11-16)","text":"<ul> <li>OGC Feature API Part 1: Core  (docs.ogc.org/is/17-069r4/17-069r4.html)</li> <li>OGC Feature API Part 3: Filtering / CQL2 (docs.ogc.org/DRAFTS/19-079r1.html)</li> <li>Support multiple output format (json, html, geojson, ndjson, csv, geojson-seg)</li> <li>geometry column selection</li> <li>datetime column selection</li> <li>primary key column selection</li> <li>output property filter</li> <li>options to reduce the bandwidth required for returning record geometries.<ul> <li>bbox-only=[bool] only return the bounding box in the return geometry</li> <li>geom-column=none don't return geometry as part of the return</li> <li>simplify=[float] Use ST_SnapToGrid(ST_Simplify(geom, [simplify]),[simplify]) to simplify and reduce precision of output geometry.</li> <li>sortby=[\u00b1][field] support to sorting by a field</li> </ul> </li> <li>ability to use user defined PostgreSQL functions as per the \"custom functions\" spec in CQL2.</li> </ul>"},{"location":"advanced/timvt_and_tifeatures/","title":"Combine MVT and Features","text":"<p>Note</p> <p>Please checkout the <code>developmentseed/tipg</code> which is the result of the merge between tifeatures and timvt.</p> <p><code>TiFeatures</code> and <code>TiMVT</code> share a lot of in common and it's possible to create a unique FastAPI application with both Features and MVT endpoints:</p> <pre><code>\"\"\"Features and MVT app.\"\"\"\n\nfrom tifeatures.db import close_db_connection, connect_to_db, register_table_catalog\nfrom tifeatures.factory import Endpoints\nfrom timvt.factory import VectorTilerFactory\nfrom fastapi import FastAPI\nfrom starlette_cramjam.middleware import CompressionMiddleware\n\napp = FastAPI(\n    title=\"Features and MVT\",\n    openapi_url=\"/api\",\n    docs_url=\"/api.html\",\n)\n\n# Register endpoints.\nendpoints = Endpoints()\napp.include_router(endpoints.router, tags=[\"Features\"])\n\n# By default the VectorTilerFactory will only create tiles/ and tilejson.json endpoints\nmvt_endpoints = VectorTilerFactory()\napp.include_router(mvt_endpoints.router)\n\napp.add_middleware(CompressionMiddleware)\n\n\n@app.on_event(\"startup\")\nasync def startup_event() -&gt; None:\n\"\"\"Connect to database on startup.\"\"\"\n    await connect_to_db(app)\n    # TiMVT and TiFeatures share the same `Table_catalog` format\n    # see https://github.com/developmentseed/timvt/pull/83\n    await register_table_catalog(app)\n\n\n@app.on_event(\"shutdown\")\nasync def shutdown_event() -&gt; None:\n\"\"\"Close database connection.\"\"\"\n    await close_db_connection(app)\n</code></pre> <p>Note</p> <p>To run the example, copy the code to a file main.py, and start uvicorn with:</p> <p><code>uvicorn main:app --reload</code></p> <p></p>"},{"location":"api/tifeatures/db/","title":"Module tifeatures.db","text":"<p>tifeatures.db: database events.</p>"},{"location":"api/tifeatures/db/#functions","title":"Functions","text":""},{"location":"api/tifeatures/db/#close_db_connection","title":"close_db_connection","text":"<pre><code>def close_db_connection(\n    app: fastapi.applications.FastAPI\n) -&gt; None\n</code></pre> <p>Close connection.</p>"},{"location":"api/tifeatures/db/#con_init","title":"con_init","text":"<pre><code>def con_init(\n    conn\n)\n</code></pre> <p>Use json for json returns.</p>"},{"location":"api/tifeatures/db/#connect_to_db","title":"connect_to_db","text":"<pre><code>def connect_to_db(\n    app: fastapi.applications.FastAPI,\n    settings: Union[tifeatures.settings.PostgresSettings, NoneType] = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Connect.</p>"},{"location":"api/tifeatures/db/#register_table_catalog","title":"register_table_catalog","text":"<pre><code>def register_table_catalog(\n    app: fastapi.applications.FastAPI,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Register Table catalog.</p>"},{"location":"api/tifeatures/dbmodel/","title":"Module tifeatures.dbmodel","text":"<p>tifeatures.dbmodel: database events.</p>"},{"location":"api/tifeatures/dbmodel/#variables","title":"Variables","text":"<pre><code>Database\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#functions","title":"Functions","text":""},{"location":"api/tifeatures/dbmodel/#get_table_index","title":"get_table_index","text":"<pre><code>def get_table_index(\n    db_pool: buildpg.asyncpg.BuildPgPool,\n    schemas: Union[List[str], NoneType] = ['public'],\n    tables: Union[List[str], NoneType] = None,\n    spatial: bool = True\n) -&gt; Dict[str, Dict[str, Any]]\n</code></pre> <p>Fetch Table index.</p>"},{"location":"api/tifeatures/dbmodel/#classes","title":"Classes","text":""},{"location":"api/tifeatures/dbmodel/#column","title":"Column","text":"<pre><code>class Column(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Model for database Column.</p>"},{"location":"api/tifeatures/dbmodel/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/dbmodel/#descendants","title":"Descendants","text":"<ul> <li>tifeatures.dbmodel.GeometryColumn</li> <li>tifeatures.dbmodel.DatetimeColumn</li> </ul>"},{"location":"api/tifeatures/dbmodel/#class-variables","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#static-methods","title":"Static methods","text":""},{"location":"api/tifeatures/dbmodel/#construct","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/dbmodel/#from_orm","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#parse_file","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#parse_obj","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#parse_raw","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#schema","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#schema_json","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#update_forward_refs","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/dbmodel/#validate","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#instance-variables","title":"Instance variables","text":"<pre><code>json_type\n</code></pre> <p>Return JSON field type.</p>"},{"location":"api/tifeatures/dbmodel/#methods","title":"Methods","text":""},{"location":"api/tifeatures/dbmodel/#copy","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/dbmodel/#dict","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/dbmodel/#json","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/dbmodel/#datetimecolumn","title":"DatetimeColumn","text":"<pre><code>class DatetimeColumn(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Model for PostGIS geometry/geography column.</p>"},{"location":"api/tifeatures/dbmodel/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>tifeatures.dbmodel.Column</li> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/dbmodel/#class-variables_1","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#static-methods_1","title":"Static methods","text":""},{"location":"api/tifeatures/dbmodel/#construct_1","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/dbmodel/#from_orm_1","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#parse_file_1","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#parse_obj_1","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#parse_raw_1","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#schema_1","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#schema_json_1","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#update_forward_refs_1","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/dbmodel/#validate_1","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#instance-variables_1","title":"Instance variables","text":"<pre><code>json_type\n</code></pre> <p>Return JSON field type.</p>"},{"location":"api/tifeatures/dbmodel/#methods_1","title":"Methods","text":""},{"location":"api/tifeatures/dbmodel/#copy_1","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/dbmodel/#dict_1","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/dbmodel/#json_1","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/dbmodel/#geometrycolumn","title":"GeometryColumn","text":"<pre><code>class GeometryColumn(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Model for PostGIS geometry/geography column.</p>"},{"location":"api/tifeatures/dbmodel/#ancestors-in-mro_2","title":"Ancestors (in MRO)","text":"<ul> <li>tifeatures.dbmodel.Column</li> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/dbmodel/#class-variables_2","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#static-methods_2","title":"Static methods","text":""},{"location":"api/tifeatures/dbmodel/#construct_2","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/dbmodel/#from_orm_2","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#parse_file_2","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#parse_obj_2","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#parse_raw_2","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#schema_2","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#schema_json_2","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#update_forward_refs_2","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/dbmodel/#validate_2","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#instance-variables_2","title":"Instance variables","text":"<pre><code>json_type\n</code></pre> <p>Return JSON field type.</p>"},{"location":"api/tifeatures/dbmodel/#methods_2","title":"Methods","text":""},{"location":"api/tifeatures/dbmodel/#copy_2","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/dbmodel/#dict_2","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/dbmodel/#json_2","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/dbmodel/#table","title":"Table","text":"<pre><code>class Table(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Model for DB Table.</p>"},{"location":"api/tifeatures/dbmodel/#ancestors-in-mro_3","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/dbmodel/#descendants_1","title":"Descendants","text":"<ul> <li>tifeatures.layer.Table</li> </ul>"},{"location":"api/tifeatures/dbmodel/#class-variables_3","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#static-methods_3","title":"Static methods","text":""},{"location":"api/tifeatures/dbmodel/#construct_3","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/dbmodel/#from_orm_3","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#parse_file_3","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#parse_obj_3","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#parse_raw_3","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#schema_3","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#schema_json_3","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#update_forward_refs_3","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/dbmodel/#validate_3","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/dbmodel/#instance-variables_3","title":"Instance variables","text":"<pre><code>id_column_info\n</code></pre> <p>Return Column for a unique identifier.</p>"},{"location":"api/tifeatures/dbmodel/#methods_3","title":"Methods","text":""},{"location":"api/tifeatures/dbmodel/#columns","title":"columns","text":"<pre><code>def columns(\n    self,\n    properties: Union[List[str], NoneType] = None\n) -&gt; List[str]\n</code></pre> <p>Return table columns optionally filtered to only include columns from properties.</p>"},{"location":"api/tifeatures/dbmodel/#copy_3","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/dbmodel/#dict_3","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/dbmodel/#get_column","title":"get_column","text":"<pre><code>def get_column(\n    self,\n    property_name: str\n) -&gt; Union[tifeatures.dbmodel.Column, NoneType]\n</code></pre> <p>Return column info.</p>"},{"location":"api/tifeatures/dbmodel/#get_datetime_column","title":"get_datetime_column","text":"<pre><code>def get_datetime_column(\n    self,\n    name: Union[str, NoneType] = None\n) -&gt; Union[tifeatures.dbmodel.Column, NoneType]\n</code></pre> <p>Return the Column for either the passed in tstz column or the first tstz column.</p>"},{"location":"api/tifeatures/dbmodel/#get_geometry_column","title":"get_geometry_column","text":"<pre><code>def get_geometry_column(\n    self,\n    name: Union[str, NoneType] = None\n) -&gt; Union[tifeatures.dbmodel.GeometryColumn, NoneType]\n</code></pre> <p>Return the name of the first geometry column.</p>"},{"location":"api/tifeatures/dbmodel/#json_3","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/dependencies/","title":"Module tifeatures.dependencies","text":"<p>tifeatures dependencies.</p>"},{"location":"api/tifeatures/dependencies/#functions","title":"Functions","text":""},{"location":"api/tifeatures/dependencies/#collectionparams","title":"CollectionParams","text":"<pre><code>def CollectionParams(\n    request: starlette.requests.Request,\n    collectionId: str = Path(Ellipsis)\n) -&gt; tifeatures.layer.Table\n</code></pre> <p>Return Layer Object.</p>"},{"location":"api/tifeatures/dependencies/#itemoutputtype","title":"ItemOutputType","text":"<pre><code>def ItemOutputType(\n    request: starlette.requests.Request,\n    f: Union[tifeatures.resources.enums.ItemResponseType, NoneType] = Query(None)\n) -&gt; Union[tifeatures.resources.enums.MediaType, NoneType]\n</code></pre> <p>Output MediaType: json or html.</p>"},{"location":"api/tifeatures/dependencies/#itemsoutputtype","title":"ItemsOutputType","text":"<pre><code>def ItemsOutputType(\n    request: starlette.requests.Request,\n    f: Union[tifeatures.resources.enums.ItemsResponseType, NoneType] = Query(None)\n) -&gt; Union[tifeatures.resources.enums.MediaType, NoneType]\n</code></pre> <p>Output MediaType: json or html.</p>"},{"location":"api/tifeatures/dependencies/#outputtype","title":"OutputType","text":"<pre><code>def OutputType(\n    request: starlette.requests.Request,\n    f: Union[tifeatures.resources.enums.ResponseType, NoneType] = Query(None)\n) -&gt; Union[tifeatures.resources.enums.MediaType, NoneType]\n</code></pre> <p>Output MediaType: json or html.</p>"},{"location":"api/tifeatures/dependencies/#queryablesoutputtype","title":"QueryablesOutputType","text":"<pre><code>def QueryablesOutputType(\n    request: starlette.requests.Request,\n    f: Union[tifeatures.resources.enums.QueryablesResponseType, NoneType] = Query(None)\n) -&gt; Union[tifeatures.resources.enums.MediaType, NoneType]\n</code></pre> <p>Output MediaType: json or html.</p>"},{"location":"api/tifeatures/dependencies/#accept_media_type","title":"accept_media_type","text":"<pre><code>def accept_media_type(\n    accept: str,\n    mediatypes: List[tifeatures.resources.enums.MediaType]\n) -&gt; Union[tifeatures.resources.enums.MediaType, NoneType]\n</code></pre> <p>Return MediaType based on accept header and available mediatype.</p> <p>Links: - www.w3.org/Protocols/rfc2616/rfc2616-sec14.html - developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept</p>"},{"location":"api/tifeatures/dependencies/#bbox_query","title":"bbox_query","text":"<pre><code>def bbox_query(\n    bbox: Union[str, NoneType] = Query(None)\n) -&gt; Union[List[float], NoneType]\n</code></pre> <p>BBox dependency.</p>"},{"location":"api/tifeatures/dependencies/#datetime_query","title":"datetime_query","text":"<pre><code>def datetime_query(\n    datetime: Union[str, NoneType] = Query(None)\n) -&gt; Union[List[str], NoneType]\n</code></pre> <p>Datetime dependency.</p>"},{"location":"api/tifeatures/dependencies/#filter_query","title":"filter_query","text":"<pre><code>def filter_query(\n    query: Union[str, NoneType] = Query(None),\n    filter_lang: Union[tifeatures.resources.enums.FilterLang, NoneType] = Query(None)\n) -&gt; Union[ForwardRef('Node'), pygeofilter.values.Geometry, pygeofilter.values.Envelope, datetime.date, datetime.datetime, datetime.timedelta, pygeofilter.values.Interval, bool, float, int, str, list, NoneType]\n</code></pre> <p>Parse Filter Query.</p>"},{"location":"api/tifeatures/dependencies/#ids_query","title":"ids_query","text":"<pre><code>def ids_query(\n    ids: Union[str, NoneType] = Query(None)\n) -&gt; Union[List[str], NoneType]\n</code></pre> <p>Ids dependency.</p>"},{"location":"api/tifeatures/dependencies/#properties_query","title":"properties_query","text":"<pre><code>def properties_query(\n    properties: Union[str, NoneType] = Query(None)\n) -&gt; Union[List[str], NoneType]\n</code></pre> <p>Return property list.</p>"},{"location":"api/tifeatures/dependencies/#sortby_query","title":"sortby_query","text":"<pre><code>def sortby_query(\n    sortby: Union[str, NoneType] = Query(None)\n)\n</code></pre> <p>Sortby dependency.</p>"},{"location":"api/tifeatures/errors/","title":"Module tifeatures.errors","text":"<p>tifeatures.errors: Error classes.</p>"},{"location":"api/tifeatures/errors/#variables","title":"Variables","text":"<pre><code>DEFAULT_STATUS_CODES\n</code></pre> <pre><code>logger\n</code></pre>"},{"location":"api/tifeatures/errors/#functions","title":"Functions","text":""},{"location":"api/tifeatures/errors/#add_exception_handlers","title":"add_exception_handlers","text":"<pre><code>def add_exception_handlers(\n    app: fastapi.applications.FastAPI,\n    status_codes: Dict[Type[Exception], int]\n) -&gt; None\n</code></pre> <p>Add exception handlers to the FastAPI app.</p>"},{"location":"api/tifeatures/errors/#exception_handler_factory","title":"exception_handler_factory","text":"<pre><code>def exception_handler_factory(\n    status_code: int\n) -&gt; Callable\n</code></pre> <p>Create a FastAPI exception handler from a status code.</p>"},{"location":"api/tifeatures/errors/#classes","title":"Classes","text":""},{"location":"api/tifeatures/errors/#invalidbbox","title":"InvalidBBox","text":"<pre><code>class InvalidBBox(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Invalid bounding box coordinates.</p>"},{"location":"api/tifeatures/errors/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>tifeatures.errors.TiFeaturesError</li> <li>builtins.Exception</li> <li>builtins.BaseException</li> </ul>"},{"location":"api/tifeatures/errors/#class-variables","title":"Class variables","text":"<pre><code>args\n</code></pre>"},{"location":"api/tifeatures/errors/#methods","title":"Methods","text":""},{"location":"api/tifeatures/errors/#with_traceback","title":"with_traceback","text":"<pre><code>def with_traceback(\n    ...\n)\n</code></pre> <p>Exception.with_traceback(tb) --</p> <p>set self.traceback to tb and return self.</p>"},{"location":"api/tifeatures/errors/#invaliddatetime","title":"InvalidDatetime","text":"<pre><code>class InvalidDatetime(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Invalid datetime.</p>"},{"location":"api/tifeatures/errors/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>tifeatures.errors.TiFeaturesError</li> <li>builtins.Exception</li> <li>builtins.BaseException</li> </ul>"},{"location":"api/tifeatures/errors/#class-variables_1","title":"Class variables","text":"<pre><code>args\n</code></pre>"},{"location":"api/tifeatures/errors/#methods_1","title":"Methods","text":""},{"location":"api/tifeatures/errors/#with_traceback_1","title":"with_traceback","text":"<pre><code>def with_traceback(\n    ...\n)\n</code></pre> <p>Exception.with_traceback(tb) --</p> <p>set self.traceback to tb and return self.</p>"},{"location":"api/tifeatures/errors/#invaliddatetimecolumnname","title":"InvalidDatetimeColumnName","text":"<pre><code>class InvalidDatetimeColumnName(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Invalid datetime column name.</p>"},{"location":"api/tifeatures/errors/#ancestors-in-mro_2","title":"Ancestors (in MRO)","text":"<ul> <li>tifeatures.errors.TiFeaturesError</li> <li>builtins.Exception</li> <li>builtins.BaseException</li> </ul>"},{"location":"api/tifeatures/errors/#class-variables_2","title":"Class variables","text":"<pre><code>args\n</code></pre>"},{"location":"api/tifeatures/errors/#methods_2","title":"Methods","text":""},{"location":"api/tifeatures/errors/#with_traceback_2","title":"with_traceback","text":"<pre><code>def with_traceback(\n    ...\n)\n</code></pre> <p>Exception.with_traceback(tb) --</p> <p>set self.traceback to tb and return self.</p>"},{"location":"api/tifeatures/errors/#invalidgeometrycolumnname","title":"InvalidGeometryColumnName","text":"<pre><code>class InvalidGeometryColumnName(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Invalid geometry column name.</p>"},{"location":"api/tifeatures/errors/#ancestors-in-mro_3","title":"Ancestors (in MRO)","text":"<ul> <li>tifeatures.errors.TiFeaturesError</li> <li>builtins.Exception</li> <li>builtins.BaseException</li> </ul>"},{"location":"api/tifeatures/errors/#class-variables_3","title":"Class variables","text":"<pre><code>args\n</code></pre>"},{"location":"api/tifeatures/errors/#methods_3","title":"Methods","text":""},{"location":"api/tifeatures/errors/#with_traceback_3","title":"with_traceback","text":"<pre><code>def with_traceback(\n    ...\n)\n</code></pre> <p>Exception.with_traceback(tb) --</p> <p>set self.traceback to tb and return self.</p>"},{"location":"api/tifeatures/errors/#invalidpropertyname","title":"InvalidPropertyName","text":"<pre><code>class InvalidPropertyName(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Invalid property/column name.</p>"},{"location":"api/tifeatures/errors/#ancestors-in-mro_4","title":"Ancestors (in MRO)","text":"<ul> <li>tifeatures.errors.TiFeaturesError</li> <li>builtins.Exception</li> <li>builtins.BaseException</li> </ul>"},{"location":"api/tifeatures/errors/#class-variables_4","title":"Class variables","text":"<pre><code>args\n</code></pre>"},{"location":"api/tifeatures/errors/#methods_4","title":"Methods","text":""},{"location":"api/tifeatures/errors/#with_traceback_4","title":"with_traceback","text":"<pre><code>def with_traceback(\n    ...\n)\n</code></pre> <p>Exception.with_traceback(tb) --</p> <p>set self.traceback to tb and return self.</p>"},{"location":"api/tifeatures/errors/#missingdatetimecolumn","title":"MissingDatetimeColumn","text":"<pre><code>class MissingDatetimeColumn(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Table has no datetime column.</p>"},{"location":"api/tifeatures/errors/#ancestors-in-mro_5","title":"Ancestors (in MRO)","text":"<ul> <li>tifeatures.errors.TiFeaturesError</li> <li>builtins.Exception</li> <li>builtins.BaseException</li> </ul>"},{"location":"api/tifeatures/errors/#class-variables_5","title":"Class variables","text":"<pre><code>args\n</code></pre>"},{"location":"api/tifeatures/errors/#methods_5","title":"Methods","text":""},{"location":"api/tifeatures/errors/#with_traceback_5","title":"with_traceback","text":"<pre><code>def with_traceback(\n    ...\n)\n</code></pre> <p>Exception.with_traceback(tb) --</p> <p>set self.traceback to tb and return self.</p>"},{"location":"api/tifeatures/errors/#missinggeometrycolumn","title":"MissingGeometryColumn","text":"<pre><code>class MissingGeometryColumn(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Table has no geometry column.</p>"},{"location":"api/tifeatures/errors/#ancestors-in-mro_6","title":"Ancestors (in MRO)","text":"<ul> <li>tifeatures.errors.TiFeaturesError</li> <li>builtins.Exception</li> <li>builtins.BaseException</li> </ul>"},{"location":"api/tifeatures/errors/#class-variables_6","title":"Class variables","text":"<pre><code>args\n</code></pre>"},{"location":"api/tifeatures/errors/#methods_6","title":"Methods","text":""},{"location":"api/tifeatures/errors/#with_traceback_6","title":"with_traceback","text":"<pre><code>def with_traceback(\n    ...\n)\n</code></pre> <p>Exception.with_traceback(tb) --</p> <p>set self.traceback to tb and return self.</p>"},{"location":"api/tifeatures/errors/#noprimarykey","title":"NoPrimaryKey","text":"<pre><code>class NoPrimaryKey(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Table has no primary key.</p>"},{"location":"api/tifeatures/errors/#ancestors-in-mro_7","title":"Ancestors (in MRO)","text":"<ul> <li>tifeatures.errors.TiFeaturesError</li> <li>builtins.Exception</li> <li>builtins.BaseException</li> </ul>"},{"location":"api/tifeatures/errors/#class-variables_7","title":"Class variables","text":"<pre><code>args\n</code></pre>"},{"location":"api/tifeatures/errors/#methods_7","title":"Methods","text":""},{"location":"api/tifeatures/errors/#with_traceback_7","title":"with_traceback","text":"<pre><code>def with_traceback(\n    ...\n)\n</code></pre> <p>Exception.with_traceback(tb) --</p> <p>set self.traceback to tb and return self.</p>"},{"location":"api/tifeatures/errors/#notfound","title":"NotFound","text":"<pre><code>class NotFound(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Invalid table name.</p>"},{"location":"api/tifeatures/errors/#ancestors-in-mro_8","title":"Ancestors (in MRO)","text":"<ul> <li>tifeatures.errors.TiFeaturesError</li> <li>builtins.Exception</li> <li>builtins.BaseException</li> </ul>"},{"location":"api/tifeatures/errors/#class-variables_8","title":"Class variables","text":"<pre><code>args\n</code></pre>"},{"location":"api/tifeatures/errors/#methods_8","title":"Methods","text":""},{"location":"api/tifeatures/errors/#with_traceback_8","title":"with_traceback","text":"<pre><code>def with_traceback(\n    ...\n)\n</code></pre> <p>Exception.with_traceback(tb) --</p> <p>set self.traceback to tb and return self.</p>"},{"location":"api/tifeatures/errors/#tifeatureserror","title":"TiFeaturesError","text":"<pre><code>class TiFeaturesError(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Base exception class.</p>"},{"location":"api/tifeatures/errors/#ancestors-in-mro_9","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.Exception</li> <li>builtins.BaseException</li> </ul>"},{"location":"api/tifeatures/errors/#descendants","title":"Descendants","text":"<ul> <li>tifeatures.errors.NotFound</li> <li>tifeatures.errors.NoPrimaryKey</li> <li>tifeatures.errors.MissingGeometryColumn</li> <li>tifeatures.errors.MissingDatetimeColumn</li> <li>tifeatures.errors.InvalidBBox</li> <li>tifeatures.errors.InvalidPropertyName</li> <li>tifeatures.errors.InvalidGeometryColumnName</li> <li>tifeatures.errors.InvalidDatetimeColumnName</li> <li>tifeatures.errors.InvalidDatetime</li> </ul>"},{"location":"api/tifeatures/errors/#class-variables_9","title":"Class variables","text":"<pre><code>args\n</code></pre>"},{"location":"api/tifeatures/errors/#methods_9","title":"Methods","text":""},{"location":"api/tifeatures/errors/#with_traceback_9","title":"with_traceback","text":"<pre><code>def with_traceback(\n    ...\n)\n</code></pre> <p>Exception.with_traceback(tb) --</p> <p>set self.traceback to tb and return self.</p>"},{"location":"api/tifeatures/factory/","title":"Module tifeatures.factory","text":"<p>tifeatures.factory: router factories.</p>"},{"location":"api/tifeatures/factory/#variables","title":"Variables","text":"<pre><code>DEFAULT_TEMPLATES\n</code></pre>"},{"location":"api/tifeatures/factory/#functions","title":"Functions","text":""},{"location":"api/tifeatures/factory/#create_csv_rows","title":"create_csv_rows","text":"<pre><code>def create_csv_rows(\n    data: Iterable[Dict]\n) -&gt; Generator[str, NoneType, NoneType]\n</code></pre> <p>Creates an iterator that returns lines of csv from an iterable of dicts.</p>"},{"location":"api/tifeatures/factory/#classes","title":"Classes","text":""},{"location":"api/tifeatures/factory/#endpoints","title":"Endpoints","text":"<pre><code>class Endpoints(\n    router: fastapi.routing.APIRouter = &lt;factory&gt;,\n    collection_dependency: Callable[..., tifeatures.layer.CollectionLayer] = &lt;function CollectionParams at 0x7f2a6cb7a310&gt;,\n    router_prefix: str = '',\n    title: str = 'TiFeatures',\n    templates: starlette.templating.Jinja2Templates = &lt;starlette.templating.Jinja2Templates object at 0x7f2a6c0ea070&gt;\n)\n</code></pre> <p>Endpoints Factory.</p>"},{"location":"api/tifeatures/factory/#class-variables","title":"Class variables","text":"<pre><code>router_prefix\n</code></pre> <pre><code>templates\n</code></pre> <pre><code>title\n</code></pre>"},{"location":"api/tifeatures/factory/#methods","title":"Methods","text":""},{"location":"api/tifeatures/factory/#collection_dependency","title":"collection_dependency","text":"<pre><code>def collection_dependency(\n    request: starlette.requests.Request,\n    collectionId: str = Path(Ellipsis)\n) -&gt; tifeatures.layer.Table\n</code></pre> <p>Return Layer Object.</p>"},{"location":"api/tifeatures/factory/#register_collections","title":"register_collections","text":"<pre><code>def register_collections(\n    self\n)\n</code></pre> <p>Register Collections endpoints.</p>"},{"location":"api/tifeatures/factory/#register_conformance","title":"register_conformance","text":"<pre><code>def register_conformance(\n    self\n) -&gt; None\n</code></pre> <p>Register conformance endpoint.</p>"},{"location":"api/tifeatures/factory/#register_landing","title":"register_landing","text":"<pre><code>def register_landing(\n    self\n) -&gt; None\n</code></pre> <p>Register landing endpoint.</p>"},{"location":"api/tifeatures/factory/#url_for","title":"url_for","text":"<pre><code>def url_for(\n    self,\n    request: starlette.requests.Request,\n    name: str,\n    **path_params: Any\n) -&gt; str\n</code></pre> <p>Return full url (with prefix) for a specific handler.</p>"},{"location":"api/tifeatures/layer/","title":"Module tifeatures.layer","text":"<p>tifeatures.layers.</p>"},{"location":"api/tifeatures/layer/#variables","title":"Variables","text":"<pre><code>geojson_schema\n</code></pre>"},{"location":"api/tifeatures/layer/#classes","title":"Classes","text":""},{"location":"api/tifeatures/layer/#collectionlayer","title":"CollectionLayer","text":"<pre><code>class CollectionLayer(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Layer's Abstract BaseClass.</p>"},{"location":"api/tifeatures/layer/#attributes","title":"Attributes","text":"Name Type Description Default id str Layer's name. None bounds list Layer's bounds (left, bottom, right, top). None crs str Coordinate reference system of the Collection. None title str Layer's title None description str Layer's description None"},{"location":"api/tifeatures/layer/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/layer/#descendants","title":"Descendants","text":"<ul> <li>tifeatures.layer.Table</li> </ul>"},{"location":"api/tifeatures/layer/#class-variables","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/layer/#static-methods","title":"Static methods","text":""},{"location":"api/tifeatures/layer/#construct","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/layer/#from_orm","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/layer/#parse_file","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/layer/#parse_obj","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/layer/#parse_raw","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/layer/#schema","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/layer/#schema_json","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/layer/#update_forward_refs","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/layer/#validate","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/layer/#instance-variables","title":"Instance variables","text":"<pre><code>queryables\n</code></pre> <p>Return the queryables.</p>"},{"location":"api/tifeatures/layer/#methods","title":"Methods","text":""},{"location":"api/tifeatures/layer/#copy","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/layer/#dict","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/layer/#features","title":"features","text":"<pre><code>def features(\n    self,\n    pool: buildpg.asyncpg.BuildPgPool,\n    *,\n    ids_filter: Union[List[str], NoneType] = None,\n    bbox_filter: Union[List[float], NoneType] = None,\n    datetime_filter: Union[List[str], NoneType] = None,\n    properties_filter: Union[List[Tuple[str, str]], NoneType] = None,\n    cql_filter: Union[ForwardRef('Node'), pygeofilter.values.Geometry, pygeofilter.values.Envelope, datetime.date, datetime.datetime, datetime.timedelta, pygeofilter.values.Interval, bool, float, int, str, list, NoneType] = None,\n    sortby: Union[str, NoneType] = None,\n    properties: Union[List[str], NoneType] = None,\n    geom: Union[str, NoneType] = None,\n    dt: Union[str, NoneType] = None,\n    limit: Union[int, NoneType] = None,\n    offset: Union[int, NoneType] = None,\n    bbox_only: Union[bool, NoneType] = None,\n    simplify: Union[float, NoneType] = None,\n    geom_as_wkt: bool = False\n) -&gt; Tuple[tifeatures.layer.FeatureCollection, int]\n</code></pre> <p>Return a FeatureCollection and the number of matched items.</p>"},{"location":"api/tifeatures/layer/#json","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/layer/#feature","title":"Feature","text":"<pre><code>class Feature(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Simple Feature model.</p>"},{"location":"api/tifeatures/layer/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.dict</li> </ul>"},{"location":"api/tifeatures/layer/#methods_1","title":"Methods","text":""},{"location":"api/tifeatures/layer/#clear","title":"clear","text":"<pre><code>def clear(\n    ...\n)\n</code></pre> <p>D.clear() -&gt; None.  Remove all items from D.</p>"},{"location":"api/tifeatures/layer/#copy_1","title":"copy","text":"<pre><code>def copy(\n    ...\n)\n</code></pre> <p>D.copy() -&gt; a shallow copy of D</p>"},{"location":"api/tifeatures/layer/#fromkeys","title":"fromkeys","text":"<pre><code>def fromkeys(\n    iterable,\n    value=None,\n    /\n)\n</code></pre> <p>Create a new dictionary with keys from iterable and values set to value.</p>"},{"location":"api/tifeatures/layer/#get","title":"get","text":"<pre><code>def get(\n    self,\n    key,\n    default=None,\n    /\n)\n</code></pre> <p>Return the value for key if key is in the dictionary, else default.</p>"},{"location":"api/tifeatures/layer/#items","title":"items","text":"<pre><code>def items(\n    ...\n)\n</code></pre> <p>D.items() -&gt; a set-like object providing a view on D's items</p>"},{"location":"api/tifeatures/layer/#keys","title":"keys","text":"<pre><code>def keys(\n    ...\n)\n</code></pre> <p>D.keys() -&gt; a set-like object providing a view on D's keys</p>"},{"location":"api/tifeatures/layer/#pop","title":"pop","text":"<pre><code>def pop(\n    ...\n)\n</code></pre> <p>D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.</p> <p>If key is not found, d is returned if given, otherwise KeyError is raised</p>"},{"location":"api/tifeatures/layer/#popitem","title":"popitem","text":"<pre><code>def popitem(\n    self,\n    /\n)\n</code></pre> <p>Remove and return a (key, value) pair as a 2-tuple.</p> <p>Pairs are returned in LIFO (last-in, first-out) order. Raises KeyError if the dict is empty.</p>"},{"location":"api/tifeatures/layer/#setdefault","title":"setdefault","text":"<pre><code>def setdefault(\n    self,\n    key,\n    default=None,\n    /\n)\n</code></pre> <p>Insert key with a value of default if key is not in the dictionary.</p> <p>Return the value for key if key is in the dictionary, else default.</p>"},{"location":"api/tifeatures/layer/#update","title":"update","text":"<pre><code>def update(\n    ...\n)\n</code></pre> <p>D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.</p> <p>If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]</p>"},{"location":"api/tifeatures/layer/#values","title":"values","text":"<pre><code>def values(\n    ...\n)\n</code></pre> <p>D.values() -&gt; an object providing a view on D's values</p>"},{"location":"api/tifeatures/layer/#featurecollection","title":"FeatureCollection","text":"<pre><code>class FeatureCollection(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Simple FeatureCollection model.</p>"},{"location":"api/tifeatures/layer/#ancestors-in-mro_2","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.dict</li> </ul>"},{"location":"api/tifeatures/layer/#methods_2","title":"Methods","text":""},{"location":"api/tifeatures/layer/#clear_1","title":"clear","text":"<pre><code>def clear(\n    ...\n)\n</code></pre> <p>D.clear() -&gt; None.  Remove all items from D.</p>"},{"location":"api/tifeatures/layer/#copy_2","title":"copy","text":"<pre><code>def copy(\n    ...\n)\n</code></pre> <p>D.copy() -&gt; a shallow copy of D</p>"},{"location":"api/tifeatures/layer/#fromkeys_1","title":"fromkeys","text":"<pre><code>def fromkeys(\n    iterable,\n    value=None,\n    /\n)\n</code></pre> <p>Create a new dictionary with keys from iterable and values set to value.</p>"},{"location":"api/tifeatures/layer/#get_1","title":"get","text":"<pre><code>def get(\n    self,\n    key,\n    default=None,\n    /\n)\n</code></pre> <p>Return the value for key if key is in the dictionary, else default.</p>"},{"location":"api/tifeatures/layer/#items_1","title":"items","text":"<pre><code>def items(\n    ...\n)\n</code></pre> <p>D.items() -&gt; a set-like object providing a view on D's items</p>"},{"location":"api/tifeatures/layer/#keys_1","title":"keys","text":"<pre><code>def keys(\n    ...\n)\n</code></pre> <p>D.keys() -&gt; a set-like object providing a view on D's keys</p>"},{"location":"api/tifeatures/layer/#pop_1","title":"pop","text":"<pre><code>def pop(\n    ...\n)\n</code></pre> <p>D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.</p> <p>If key is not found, d is returned if given, otherwise KeyError is raised</p>"},{"location":"api/tifeatures/layer/#popitem_1","title":"popitem","text":"<pre><code>def popitem(\n    self,\n    /\n)\n</code></pre> <p>Remove and return a (key, value) pair as a 2-tuple.</p> <p>Pairs are returned in LIFO (last-in, first-out) order. Raises KeyError if the dict is empty.</p>"},{"location":"api/tifeatures/layer/#setdefault_1","title":"setdefault","text":"<pre><code>def setdefault(\n    self,\n    key,\n    default=None,\n    /\n)\n</code></pre> <p>Insert key with a value of default if key is not in the dictionary.</p> <p>Return the value for key if key is in the dictionary, else default.</p>"},{"location":"api/tifeatures/layer/#update_1","title":"update","text":"<pre><code>def update(\n    ...\n)\n</code></pre> <p>D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.</p> <p>If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]</p>"},{"location":"api/tifeatures/layer/#values_1","title":"values","text":"<pre><code>def values(\n    ...\n)\n</code></pre> <p>D.values() -&gt; an object providing a view on D's values</p>"},{"location":"api/tifeatures/layer/#rawcomponent","title":"RawComponent","text":"<pre><code>class RawComponent(\n    val\n)\n</code></pre> <p>Enable building statements with more complicated logic.</p>"},{"location":"api/tifeatures/layer/#ancestors-in-mro_3","title":"Ancestors (in MRO)","text":"<ul> <li>buildpg.components.VarLiteral</li> <li>buildpg.components.RawDangerous</li> <li>builtins.str</li> </ul>"},{"location":"api/tifeatures/layer/#static-methods_1","title":"Static methods","text":""},{"location":"api/tifeatures/layer/#maketrans","title":"maketrans","text":"<pre><code>def maketrans(\n    ...\n)\n</code></pre> <p>Return a translation table usable for str.translate().</p> <p>If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters to Unicode ordinals, strings or None. Character keys will be then converted to ordinals. If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result.</p>"},{"location":"api/tifeatures/layer/#instance-variables_1","title":"Instance variables","text":"<pre><code>val\n</code></pre>"},{"location":"api/tifeatures/layer/#methods_3","title":"Methods","text":""},{"location":"api/tifeatures/layer/#capitalize","title":"capitalize","text":"<pre><code>def capitalize(\n    self,\n    /\n)\n</code></pre> <p>Return a capitalized version of the string.</p> <p>More specifically, make the first character have upper case and the rest lower case.</p>"},{"location":"api/tifeatures/layer/#casefold","title":"casefold","text":"<pre><code>def casefold(\n    self,\n    /\n)\n</code></pre> <p>Return a version of the string suitable for caseless comparisons.</p>"},{"location":"api/tifeatures/layer/#center","title":"center","text":"<pre><code>def center(\n    self,\n    width,\n    fillchar=' ',\n    /\n)\n</code></pre> <p>Return a centered string of length width.</p> <p>Padding is done using the specified fill character (default is a space).</p>"},{"location":"api/tifeatures/layer/#count","title":"count","text":"<pre><code>def count(\n    ...\n)\n</code></pre> <p>S.count(sub[, start[, end]]) -&gt; int</p> <p>Return the number of non-overlapping occurrences of substring sub in string S[start:end].  Optional arguments start and end are interpreted as in slice notation.</p>"},{"location":"api/tifeatures/layer/#encode","title":"encode","text":"<pre><code>def encode(\n    self,\n    /,\n    encoding='utf-8',\n    errors='strict'\n)\n</code></pre> <p>Encode the string using the codec registered for encoding.</p> <p>encoding   The encoding in which to encode the string. errors   The error handling scheme to use for encoding errors.   The default is 'strict' meaning that encoding errors raise a   UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and   'xmlcharrefreplace' as well as any other name registered with   codecs.register_error that can handle UnicodeEncodeErrors.</p>"},{"location":"api/tifeatures/layer/#endswith","title":"endswith","text":"<pre><code>def endswith(\n    ...\n)\n</code></pre> <p>S.endswith(suffix[, start[, end]]) -&gt; bool</p> <p>Return True if S ends with the specified suffix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. suffix can also be a tuple of strings to try.</p>"},{"location":"api/tifeatures/layer/#expandtabs","title":"expandtabs","text":"<pre><code>def expandtabs(\n    self,\n    /,\n    tabsize=8\n)\n</code></pre> <p>Return a copy where all tab characters are expanded using spaces.</p> <p>If tabsize is not given, a tab size of 8 characters is assumed.</p>"},{"location":"api/tifeatures/layer/#find","title":"find","text":"<pre><code>def find(\n    ...\n)\n</code></pre> <p>S.find(sub[, start[, end]]) -&gt; int</p> <p>Return the lowest index in S where substring sub is found, such that sub is contained within S[start:end].  Optional arguments start and end are interpreted as in slice notation.</p> <p>Return -1 on failure.</p>"},{"location":"api/tifeatures/layer/#format","title":"format","text":"<pre><code>def format(\n    ...\n)\n</code></pre> <p>S.format(args, *kwargs) -&gt; str</p> <p>Return a formatted version of S, using substitutions from args and kwargs. The substitutions are identified by braces ('{' and '}').</p>"},{"location":"api/tifeatures/layer/#format_map","title":"format_map","text":"<pre><code>def format_map(\n    ...\n)\n</code></pre> <p>S.format_map(mapping) -&gt; str</p> <p>Return a formatted version of S, using substitutions from mapping. The substitutions are identified by braces ('{' and '}').</p>"},{"location":"api/tifeatures/layer/#index","title":"index","text":"<pre><code>def index(\n    ...\n)\n</code></pre> <p>S.index(sub[, start[, end]]) -&gt; int</p> <p>Return the lowest index in S where substring sub is found, such that sub is contained within S[start:end].  Optional arguments start and end are interpreted as in slice notation.</p> <p>Raises ValueError when the substring is not found.</p>"},{"location":"api/tifeatures/layer/#isalnum","title":"isalnum","text":"<pre><code>def isalnum(\n    self,\n    /\n)\n</code></pre> <p>Return True if the string is an alpha-numeric string, False otherwise.</p> <p>A string is alpha-numeric if all characters in the string are alpha-numeric and there is at least one character in the string.</p>"},{"location":"api/tifeatures/layer/#isalpha","title":"isalpha","text":"<pre><code>def isalpha(\n    self,\n    /\n)\n</code></pre> <p>Return True if the string is an alphabetic string, False otherwise.</p> <p>A string is alphabetic if all characters in the string are alphabetic and there is at least one character in the string.</p>"},{"location":"api/tifeatures/layer/#isascii","title":"isascii","text":"<pre><code>def isascii(\n    self,\n    /\n)\n</code></pre> <p>Return True if all characters in the string are ASCII, False otherwise.</p> <p>ASCII characters have code points in the range U+0000-U+007F. Empty string is ASCII too.</p>"},{"location":"api/tifeatures/layer/#isdecimal","title":"isdecimal","text":"<pre><code>def isdecimal(\n    self,\n    /\n)\n</code></pre> <p>Return True if the string is a decimal string, False otherwise.</p> <p>A string is a decimal string if all characters in the string are decimal and there is at least one character in the string.</p>"},{"location":"api/tifeatures/layer/#isdigit","title":"isdigit","text":"<pre><code>def isdigit(\n    self,\n    /\n)\n</code></pre> <p>Return True if the string is a digit string, False otherwise.</p> <p>A string is a digit string if all characters in the string are digits and there is at least one character in the string.</p>"},{"location":"api/tifeatures/layer/#isidentifier","title":"isidentifier","text":"<pre><code>def isidentifier(\n    self,\n    /\n)\n</code></pre> <p>Return True if the string is a valid Python identifier, False otherwise.</p> <p>Call keyword.iskeyword(s) to test whether string s is a reserved identifier, such as \"def\" or \"class\".</p>"},{"location":"api/tifeatures/layer/#islower","title":"islower","text":"<pre><code>def islower(\n    self,\n    /\n)\n</code></pre> <p>Return True if the string is a lowercase string, False otherwise.</p> <p>A string is lowercase if all cased characters in the string are lowercase and there is at least one cased character in the string.</p>"},{"location":"api/tifeatures/layer/#isnumeric","title":"isnumeric","text":"<pre><code>def isnumeric(\n    self,\n    /\n)\n</code></pre> <p>Return True if the string is a numeric string, False otherwise.</p> <p>A string is numeric if all characters in the string are numeric and there is at least one character in the string.</p>"},{"location":"api/tifeatures/layer/#isprintable","title":"isprintable","text":"<pre><code>def isprintable(\n    self,\n    /\n)\n</code></pre> <p>Return True if the string is printable, False otherwise.</p> <p>A string is printable if all of its characters are considered printable in repr() or if it is empty.</p>"},{"location":"api/tifeatures/layer/#isspace","title":"isspace","text":"<pre><code>def isspace(\n    self,\n    /\n)\n</code></pre> <p>Return True if the string is a whitespace string, False otherwise.</p> <p>A string is whitespace if all characters in the string are whitespace and there is at least one character in the string.</p>"},{"location":"api/tifeatures/layer/#istitle","title":"istitle","text":"<pre><code>def istitle(\n    self,\n    /\n)\n</code></pre> <p>Return True if the string is a title-cased string, False otherwise.</p> <p>In a title-cased string, upper- and title-case characters may only follow uncased characters and lowercase characters only cased ones.</p>"},{"location":"api/tifeatures/layer/#isupper","title":"isupper","text":"<pre><code>def isupper(\n    self,\n    /\n)\n</code></pre> <p>Return True if the string is an uppercase string, False otherwise.</p> <p>A string is uppercase if all cased characters in the string are uppercase and there is at least one cased character in the string.</p>"},{"location":"api/tifeatures/layer/#join","title":"join","text":"<pre><code>def join(\n    self,\n    iterable,\n    /\n)\n</code></pre> <p>Concatenate any number of strings.</p> <p>The string whose method is called is inserted in between each given string. The result is returned as a new string.</p> <p>Example: '.'.join(['ab', 'pq', 'rs']) -&gt; 'ab.pq.rs'</p>"},{"location":"api/tifeatures/layer/#ljust","title":"ljust","text":"<pre><code>def ljust(\n    self,\n    width,\n    fillchar=' ',\n    /\n)\n</code></pre> <p>Return a left-justified string of length width.</p> <p>Padding is done using the specified fill character (default is a space).</p>"},{"location":"api/tifeatures/layer/#lower","title":"lower","text":"<pre><code>def lower(\n    self,\n    /\n)\n</code></pre> <p>Return a copy of the string converted to lowercase.</p>"},{"location":"api/tifeatures/layer/#lstrip","title":"lstrip","text":"<pre><code>def lstrip(\n    self,\n    chars=None,\n    /\n)\n</code></pre> <p>Return a copy of the string with leading whitespace removed.</p> <p>If chars is given and not None, remove characters in chars instead.</p>"},{"location":"api/tifeatures/layer/#partition","title":"partition","text":"<pre><code>def partition(\n    self,\n    sep,\n    /\n)\n</code></pre> <p>Partition the string into three parts using the given separator.</p> <p>This will search for the separator in the string.  If the separator is found, returns a 3-tuple containing the part before the separator, the separator itself, and the part after it.</p> <p>If the separator is not found, returns a 3-tuple containing the original string and two empty strings.</p>"},{"location":"api/tifeatures/layer/#render","title":"render","text":"<pre><code>def render(\n    self\n)\n</code></pre> <p>Render</p>"},{"location":"api/tifeatures/layer/#replace","title":"replace","text":"<pre><code>def replace(\n    self,\n    old,\n    new,\n    count=-1,\n    /\n)\n</code></pre> <p>Return a copy with all occurrences of substring old replaced by new.</p> <p>count     Maximum number of occurrences to replace.     -1 (the default value) means replace all occurrences.</p> <p>If the optional argument count is given, only the first count occurrences are replaced.</p>"},{"location":"api/tifeatures/layer/#rfind","title":"rfind","text":"<pre><code>def rfind(\n    ...\n)\n</code></pre> <p>S.rfind(sub[, start[, end]]) -&gt; int</p> <p>Return the highest index in S where substring sub is found, such that sub is contained within S[start:end].  Optional arguments start and end are interpreted as in slice notation.</p> <p>Return -1 on failure.</p>"},{"location":"api/tifeatures/layer/#rindex","title":"rindex","text":"<pre><code>def rindex(\n    ...\n)\n</code></pre> <p>S.rindex(sub[, start[, end]]) -&gt; int</p> <p>Return the highest index in S where substring sub is found, such that sub is contained within S[start:end].  Optional arguments start and end are interpreted as in slice notation.</p> <p>Raises ValueError when the substring is not found.</p>"},{"location":"api/tifeatures/layer/#rjust","title":"rjust","text":"<pre><code>def rjust(\n    self,\n    width,\n    fillchar=' ',\n    /\n)\n</code></pre> <p>Return a right-justified string of length width.</p> <p>Padding is done using the specified fill character (default is a space).</p>"},{"location":"api/tifeatures/layer/#rpartition","title":"rpartition","text":"<pre><code>def rpartition(\n    self,\n    sep,\n    /\n)\n</code></pre> <p>Partition the string into three parts using the given separator.</p> <p>This will search for the separator in the string, starting at the end. If the separator is found, returns a 3-tuple containing the part before the separator, the separator itself, and the part after it.</p> <p>If the separator is not found, returns a 3-tuple containing two empty strings and the original string.</p>"},{"location":"api/tifeatures/layer/#rsplit","title":"rsplit","text":"<pre><code>def rsplit(\n    self,\n    /,\n    sep=None,\n    maxsplit=-1\n)\n</code></pre> <p>Return a list of the words in the string, using sep as the delimiter string.</p> <p>sep     The delimiter according which to split the string.     None (the default value) means split according to any whitespace,     and discard empty strings from the result.   maxsplit     Maximum number of splits to do.     -1 (the default value) means no limit.</p> <p>Splits are done starting at the end of the string and working to the front.</p>"},{"location":"api/tifeatures/layer/#rstrip","title":"rstrip","text":"<pre><code>def rstrip(\n    self,\n    chars=None,\n    /\n)\n</code></pre> <p>Return a copy of the string with trailing whitespace removed.</p> <p>If chars is given and not None, remove characters in chars instead.</p>"},{"location":"api/tifeatures/layer/#split","title":"split","text":"<pre><code>def split(\n    self,\n    /,\n    sep=None,\n    maxsplit=-1\n)\n</code></pre> <p>Return a list of the words in the string, using sep as the delimiter string.</p> <p>sep   The delimiter according which to split the string.   None (the default value) means split according to any whitespace,   and discard empty strings from the result. maxsplit   Maximum number of splits to do.   -1 (the default value) means no limit.</p>"},{"location":"api/tifeatures/layer/#splitlines","title":"splitlines","text":"<pre><code>def splitlines(\n    self,\n    /,\n    keepends=False\n)\n</code></pre> <p>Return a list of the lines in the string, breaking at line boundaries.</p> <p>Line breaks are not included in the resulting list unless keepends is given and true.</p>"},{"location":"api/tifeatures/layer/#startswith","title":"startswith","text":"<pre><code>def startswith(\n    ...\n)\n</code></pre> <p>S.startswith(prefix[, start[, end]]) -&gt; bool</p> <p>Return True if S starts with the specified prefix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. prefix can also be a tuple of strings to try.</p>"},{"location":"api/tifeatures/layer/#strip","title":"strip","text":"<pre><code>def strip(\n    self,\n    chars=None,\n    /\n)\n</code></pre> <p>Return a copy of the string with leading and trailing whitespace removed.</p> <p>If chars is given and not None, remove characters in chars instead.</p>"},{"location":"api/tifeatures/layer/#swapcase","title":"swapcase","text":"<pre><code>def swapcase(\n    self,\n    /\n)\n</code></pre> <p>Convert uppercase characters to lowercase and lowercase characters to uppercase.</p>"},{"location":"api/tifeatures/layer/#title","title":"title","text":"<pre><code>def title(\n    self,\n    /\n)\n</code></pre> <p>Return a version of the string where each word is titlecased.</p> <p>More specifically, words start with uppercased characters and all remaining cased characters have lower case.</p>"},{"location":"api/tifeatures/layer/#translate","title":"translate","text":"<pre><code>def translate(\n    self,\n    table,\n    /\n)\n</code></pre> <p>Replace each character in the string using the given translation table.</p> <p>table     Translation table, which must be a mapping of Unicode ordinals to     Unicode ordinals, strings, or None.</p> <p>The table must implement lookup/indexing via getitem, for instance a dictionary or list.  If this operation raises LookupError, the character is left untouched.  Characters mapped to None are deleted.</p>"},{"location":"api/tifeatures/layer/#upper","title":"upper","text":"<pre><code>def upper(\n    self,\n    /\n)\n</code></pre> <p>Return a copy of the string converted to uppercase.</p>"},{"location":"api/tifeatures/layer/#zfill","title":"zfill","text":"<pre><code>def zfill(\n    self,\n    width,\n    /\n)\n</code></pre> <p>Pad a numeric string with zeros on the left, to fill a field of the given width.</p> <p>The string is never truncated.</p>"},{"location":"api/tifeatures/layer/#table","title":"Table","text":"<pre><code>class Table(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Table Reader.</p>"},{"location":"api/tifeatures/layer/#attributes_1","title":"Attributes","text":"Name Type Description Default id str Layer's name. None bounds list Layer's bounds (left, bottom, right, top). None crs str Coordinate reference system of the Table. None type str Layer's type. None schema str Table's database schema (e.g public). None geometry_type str Table's geometry type (e.g polygon). None srid int Table's SRID None geometry_column str Name of the geomtry column in the table. None properties Dict Properties available in the table. None"},{"location":"api/tifeatures/layer/#ancestors-in-mro_4","title":"Ancestors (in MRO)","text":"<ul> <li>tifeatures.layer.CollectionLayer</li> <li>tifeatures.dbmodel.Table</li> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/layer/#class-variables_1","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/layer/#static-methods_2","title":"Static methods","text":""},{"location":"api/tifeatures/layer/#bounds_default","title":"bounds_default","text":"<pre><code>def bounds_default(\n    values\n)\n</code></pre> <p>Get default bounds from the first geometry columns.</p>"},{"location":"api/tifeatures/layer/#construct_1","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/layer/#from_orm_1","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/layer/#parse_file_1","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/layer/#parse_obj_1","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/layer/#parse_raw_1","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/layer/#schema_1","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/layer/#schema_json_1","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/layer/#update_forward_refs_1","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/layer/#validate_1","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/layer/#instance-variables_2","title":"Instance variables","text":"<pre><code>id_column_info\n</code></pre> <p>Return Column for a unique identifier.</p> <pre><code>queryables\n</code></pre> <p>Return the queryables.</p>"},{"location":"api/tifeatures/layer/#methods_4","title":"Methods","text":""},{"location":"api/tifeatures/layer/#columns","title":"columns","text":"<pre><code>def columns(\n    self,\n    properties: Union[List[str], NoneType] = None\n) -&gt; List[str]\n</code></pre> <p>Return table columns optionally filtered to only include columns from properties.</p>"},{"location":"api/tifeatures/layer/#copy_3","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/layer/#dict_1","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/layer/#features_1","title":"features","text":"<pre><code>def features(\n    self,\n    pool: buildpg.asyncpg.BuildPgPool,\n    *,\n    ids_filter: Union[List[str], NoneType] = None,\n    bbox_filter: Union[List[float], NoneType] = None,\n    datetime_filter: Union[List[str], NoneType] = None,\n    properties_filter: Union[List[Tuple[str, str]], NoneType] = None,\n    cql_filter: Union[ForwardRef('Node'), pygeofilter.values.Geometry, pygeofilter.values.Envelope, datetime.date, datetime.datetime, datetime.timedelta, pygeofilter.values.Interval, bool, float, int, str, list, NoneType] = None,\n    sortby: Union[str, NoneType] = None,\n    properties: Union[List[str], NoneType] = None,\n    geom: Union[str, NoneType] = None,\n    dt: Union[str, NoneType] = None,\n    limit: Union[int, NoneType] = None,\n    offset: Union[int, NoneType] = None,\n    bbox_only: Union[bool, NoneType] = None,\n    simplify: Union[float, NoneType] = None,\n    geom_as_wkt: bool = False\n) -&gt; Tuple[tifeatures.layer.FeatureCollection, int]\n</code></pre> <p>Build and run Pg query.</p>"},{"location":"api/tifeatures/layer/#get_column","title":"get_column","text":"<pre><code>def get_column(\n    self,\n    property_name: str\n) -&gt; Union[tifeatures.dbmodel.Column, NoneType]\n</code></pre> <p>Return column info.</p>"},{"location":"api/tifeatures/layer/#get_datetime_column","title":"get_datetime_column","text":"<pre><code>def get_datetime_column(\n    self,\n    name: Union[str, NoneType] = None\n) -&gt; Union[tifeatures.dbmodel.Column, NoneType]\n</code></pre> <p>Return the Column for either the passed in tstz column or the first tstz column.</p>"},{"location":"api/tifeatures/layer/#get_geometry_column","title":"get_geometry_column","text":"<pre><code>def get_geometry_column(\n    self,\n    name: Union[str, NoneType] = None\n) -&gt; Union[tifeatures.dbmodel.GeometryColumn, NoneType]\n</code></pre> <p>Return the name of the first geometry column.</p>"},{"location":"api/tifeatures/layer/#json_1","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/middleware/","title":"Module tifeatures.middleware","text":"<p>tifeatures middlewares.</p>"},{"location":"api/tifeatures/middleware/#classes","title":"Classes","text":""},{"location":"api/tifeatures/middleware/#cachecontrolmiddleware","title":"CacheControlMiddleware","text":"<pre><code>class CacheControlMiddleware(\n    app: Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[NoneType]]], Awaitable[NoneType]],\n    cachecontrol: Union[str, NoneType] = None,\n    exclude_path: Union[Set[str], NoneType] = None\n)\n</code></pre> <p>MiddleWare to add CacheControl in response headers.</p>"},{"location":"api/tifeatures/middleware/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>starlette.middleware.base.BaseHTTPMiddleware</li> </ul>"},{"location":"api/tifeatures/middleware/#methods","title":"Methods","text":""},{"location":"api/tifeatures/middleware/#dispatch","title":"dispatch","text":"<pre><code>def dispatch(\n    self,\n    request: starlette.requests.Request,\n    call_next\n)\n</code></pre> <p>Add cache-control.</p>"},{"location":"api/tifeatures/model/","title":"Module tifeatures.model","text":"<p>tifeatures models.</p>"},{"location":"api/tifeatures/model/#classes","title":"Classes","text":""},{"location":"api/tifeatures/model/#collection","title":"Collection","text":"<pre><code>class Collection(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Collection model.</p> <p>Ref: schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/collection.yaml</p>"},{"location":"api/tifeatures/model/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/model/#class-variables","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/model/#static-methods","title":"Static methods","text":""},{"location":"api/tifeatures/model/#construct","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/model/#from_orm","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_file","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_obj","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_raw","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#schema","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_json","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/model/#update_forward_refs","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/model/#validate","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#methods","title":"Methods","text":""},{"location":"api/tifeatures/model/#copy","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/model/#dict","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/model/#json","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/model/#collections","title":"Collections","text":"<pre><code>class Collections(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Collections model.</p> <p>Ref: schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/collections.yaml</p>"},{"location":"api/tifeatures/model/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/model/#class-variables_1","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/model/#static-methods_1","title":"Static methods","text":""},{"location":"api/tifeatures/model/#construct_1","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/model/#from_orm_1","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_file_1","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_obj_1","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_raw_1","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_1","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_json_1","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/model/#update_forward_refs_1","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/model/#validate_1","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#methods_1","title":"Methods","text":""},{"location":"api/tifeatures/model/#copy_1","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/model/#dict_1","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/model/#json_1","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/model/#conformance","title":"Conformance","text":"<pre><code>class Conformance(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Conformance model.</p> <p>Ref: schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/confClasses.yaml</p>"},{"location":"api/tifeatures/model/#ancestors-in-mro_2","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/model/#class-variables_2","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/model/#static-methods_2","title":"Static methods","text":""},{"location":"api/tifeatures/model/#construct_2","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/model/#from_orm_2","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_file_2","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_obj_2","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_raw_2","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_2","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_json_2","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/model/#update_forward_refs_2","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/model/#validate_2","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#methods_2","title":"Methods","text":""},{"location":"api/tifeatures/model/#copy_2","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/model/#dict_2","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/model/#json_2","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/model/#extent","title":"Extent","text":"<pre><code>class Extent(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Extent model.</p> <p>Ref: schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/extent.yaml</p>"},{"location":"api/tifeatures/model/#ancestors-in-mro_3","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/model/#class-variables_3","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/model/#static-methods_3","title":"Static methods","text":""},{"location":"api/tifeatures/model/#construct_3","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/model/#from_orm_3","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_file_3","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_obj_3","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_raw_3","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_3","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_json_3","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/model/#update_forward_refs_3","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/model/#validate_3","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#methods_3","title":"Methods","text":""},{"location":"api/tifeatures/model/#copy_3","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/model/#dict_3","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/model/#json_3","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/model/#item","title":"Item","text":"<pre><code>class Item(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Item model</p> <p>Ref: schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/featureGeoJSON.yaml</p>"},{"location":"api/tifeatures/model/#ancestors-in-mro_4","title":"Ancestors (in MRO)","text":"<ul> <li>geojson_pydantic.features.Feature</li> <li>pydantic.generics.GenericModel</li> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> <li>typing.Generic</li> </ul>"},{"location":"api/tifeatures/model/#class-variables_4","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/model/#static-methods_4","title":"Static methods","text":""},{"location":"api/tifeatures/model/#construct_4","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/model/#from_orm_4","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_file_4","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_obj_4","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_raw_4","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_4","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_json_4","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/model/#set_geometry","title":"set_geometry","text":"<pre><code>def set_geometry(\n    geometry: Any\n) -&gt; Any\n</code></pre> <p>set geometry from geo interface or input</p>"},{"location":"api/tifeatures/model/#update_forward_refs_4","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/model/#validate_4","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#methods_4","title":"Methods","text":""},{"location":"api/tifeatures/model/#copy_4","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/model/#dict_4","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/model/#json_4","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/model/#items","title":"Items","text":"<pre><code>class Items(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Items model</p> <p>Ref: schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/featureCollectionGeoJSON.yaml</p>"},{"location":"api/tifeatures/model/#ancestors-in-mro_5","title":"Ancestors (in MRO)","text":"<ul> <li>geojson_pydantic.features.FeatureCollection</li> <li>pydantic.generics.GenericModel</li> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> <li>typing.Generic</li> </ul>"},{"location":"api/tifeatures/model/#class-variables_5","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/model/#static-methods_5","title":"Static methods","text":""},{"location":"api/tifeatures/model/#construct_5","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/model/#from_orm_5","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_file_5","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_obj_5","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_raw_5","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_5","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_json_5","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/model/#update_forward_refs_5","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/model/#validate_5","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#methods_5","title":"Methods","text":""},{"location":"api/tifeatures/model/#copy_5","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/model/#dict_5","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/model/#json_5","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/model/#json_seq","title":"json_seq","text":"<pre><code>def json_seq(\n    self,\n    **kwargs\n)\n</code></pre> <p>return a GeoJSON sequence representation.</p>"},{"location":"api/tifeatures/model/#landing","title":"Landing","text":"<pre><code>class Landing(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Landing page model.</p> <p>Ref: schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/landingPage.yaml</p>"},{"location":"api/tifeatures/model/#ancestors-in-mro_6","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/model/#class-variables_6","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/model/#static-methods_6","title":"Static methods","text":""},{"location":"api/tifeatures/model/#construct_6","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/model/#from_orm_6","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_file_6","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_obj_6","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_raw_6","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_6","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_json_6","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/model/#update_forward_refs_6","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/model/#validate_6","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#methods_6","title":"Methods","text":""},{"location":"api/tifeatures/model/#copy_6","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/model/#dict_6","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/model/#json_6","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/model/#link","title":"Link","text":"<pre><code>class Link(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Link model.</p> <p>Ref: schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/link.yaml</p>"},{"location":"api/tifeatures/model/#ancestors-in-mro_7","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/model/#class-variables_7","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/model/#static-methods_7","title":"Static methods","text":""},{"location":"api/tifeatures/model/#construct_7","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/model/#from_orm_7","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_file_7","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_obj_7","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_raw_7","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_7","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_json_7","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/model/#update_forward_refs_7","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/model/#validate_7","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#methods_7","title":"Methods","text":""},{"location":"api/tifeatures/model/#copy_7","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/model/#dict_7","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/model/#json_7","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/model/#queryables","title":"Queryables","text":"<pre><code>class Queryables(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Queryables model.</p> <p>Ref: docs.ogc.org/DRAFTS/19-079r1.html#filter-queryables</p>"},{"location":"api/tifeatures/model/#ancestors-in-mro_8","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/model/#class-variables_8","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/model/#static-methods_8","title":"Static methods","text":""},{"location":"api/tifeatures/model/#construct_8","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/model/#from_orm_8","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_file_8","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_obj_8","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_raw_8","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_8","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_json_8","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/model/#update_forward_refs_8","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/model/#validate_8","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#methods_8","title":"Methods","text":""},{"location":"api/tifeatures/model/#copy_8","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/model/#dict_8","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/model/#json_8","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/model/#spatial","title":"Spatial","text":"<pre><code>class Spatial(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Spatial Extent model.</p> <p>Ref: schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/extent.yaml</p>"},{"location":"api/tifeatures/model/#ancestors-in-mro_9","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/model/#class-variables_9","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/model/#static-methods_9","title":"Static methods","text":""},{"location":"api/tifeatures/model/#construct_9","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/model/#from_orm_9","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_file_9","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_obj_9","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_raw_9","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_9","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_json_9","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/model/#update_forward_refs_9","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/model/#validate_9","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#methods_9","title":"Methods","text":""},{"location":"api/tifeatures/model/#copy_9","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/model/#dict_9","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/model/#json_9","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/model/#temporal","title":"Temporal","text":"<pre><code>class Temporal(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Temporal Extent model.</p> <p>Ref: schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/extent.yaml</p>"},{"location":"api/tifeatures/model/#ancestors-in-mro_10","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/model/#class-variables_10","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/model/#static-methods_10","title":"Static methods","text":""},{"location":"api/tifeatures/model/#construct_10","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/model/#from_orm_10","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_file_10","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_obj_10","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#parse_raw_10","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_10","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/model/#schema_json_10","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/model/#update_forward_refs_10","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/model/#validate_10","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/model/#methods_10","title":"Methods","text":""},{"location":"api/tifeatures/model/#copy_10","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/model/#dict_10","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/model/#json_10","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/settings/","title":"Module tifeatures.settings","text":"<p>tifeatures config.</p>"},{"location":"api/tifeatures/settings/#functions","title":"Functions","text":""},{"location":"api/tifeatures/settings/#apisettings","title":"APISettings","text":"<pre><code>def APISettings(\n\n) -&gt; tifeatures.settings._APISettings\n</code></pre> <p>This function returns a cached instance of the Settings object.</p>"},{"location":"api/tifeatures/settings/#classes","title":"Classes","text":""},{"location":"api/tifeatures/settings/#postgressettings","title":"PostgresSettings","text":"<pre><code>class PostgresSettings(\n    __pydantic_self__,\n    _env_file: Union[str, os.PathLike, List[Union[str, os.PathLike]], Tuple[Union[str, os.PathLike], ...], NoneType] = '&lt;object object at 0x7f2a6da83bb0&gt;',\n    _env_file_encoding: Union[str, NoneType] = None,\n    _env_nested_delimiter: Union[str, NoneType] = None,\n    _secrets_dir: Union[str, os.PathLike, NoneType] = None,\n    **values: Any\n)\n</code></pre> <p>Postgres-specific API settings.</p>"},{"location":"api/tifeatures/settings/#attributes","title":"Attributes","text":"Name Type Description Default postgres_user None postgres username. None postgres_pass None postgres password. None postgres_host None hostname for the connection. None postgres_port None database port. None postgres_dbname None database name. None"},{"location":"api/tifeatures/settings/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.env_settings.BaseSettings</li> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/settings/#class-variables","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/settings/#static-methods","title":"Static methods","text":""},{"location":"api/tifeatures/settings/#assemble_db_connection","title":"assemble_db_connection","text":"<pre><code>def assemble_db_connection(\n    v: Union[str, NoneType],\n    values: Dict[str, Any]\n) -&gt; Any\n</code></pre> <p>Validate db url settings.</p>"},{"location":"api/tifeatures/settings/#construct","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/settings/#from_orm","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/settings/#parse_file","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/settings/#parse_obj","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/settings/#parse_raw","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/settings/#schema","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/settings/#schema_json","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/settings/#update_forward_refs","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/settings/#validate","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/settings/#methods","title":"Methods","text":""},{"location":"api/tifeatures/settings/#copy","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/settings/#dict","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/settings/#json","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/settings/#tableconfig","title":"TableConfig","text":"<pre><code>class TableConfig(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Configuration to add table options with env variables.</p>"},{"location":"api/tifeatures/settings/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.dict</li> </ul>"},{"location":"api/tifeatures/settings/#methods_1","title":"Methods","text":""},{"location":"api/tifeatures/settings/#clear","title":"clear","text":"<pre><code>def clear(\n    ...\n)\n</code></pre> <p>D.clear() -&gt; None.  Remove all items from D.</p>"},{"location":"api/tifeatures/settings/#copy_1","title":"copy","text":"<pre><code>def copy(\n    ...\n)\n</code></pre> <p>D.copy() -&gt; a shallow copy of D</p>"},{"location":"api/tifeatures/settings/#fromkeys","title":"fromkeys","text":"<pre><code>def fromkeys(\n    iterable,\n    value=None,\n    /\n)\n</code></pre> <p>Create a new dictionary with keys from iterable and values set to value.</p>"},{"location":"api/tifeatures/settings/#get","title":"get","text":"<pre><code>def get(\n    self,\n    key,\n    default=None,\n    /\n)\n</code></pre> <p>Return the value for key if key is in the dictionary, else default.</p>"},{"location":"api/tifeatures/settings/#items","title":"items","text":"<pre><code>def items(\n    ...\n)\n</code></pre> <p>D.items() -&gt; a set-like object providing a view on D's items</p>"},{"location":"api/tifeatures/settings/#keys","title":"keys","text":"<pre><code>def keys(\n    ...\n)\n</code></pre> <p>D.keys() -&gt; a set-like object providing a view on D's keys</p>"},{"location":"api/tifeatures/settings/#pop","title":"pop","text":"<pre><code>def pop(\n    ...\n)\n</code></pre> <p>D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.</p> <p>If key is not found, d is returned if given, otherwise KeyError is raised</p>"},{"location":"api/tifeatures/settings/#popitem","title":"popitem","text":"<pre><code>def popitem(\n    self,\n    /\n)\n</code></pre> <p>Remove and return a (key, value) pair as a 2-tuple.</p> <p>Pairs are returned in LIFO (last-in, first-out) order. Raises KeyError if the dict is empty.</p>"},{"location":"api/tifeatures/settings/#setdefault","title":"setdefault","text":"<pre><code>def setdefault(\n    self,\n    key,\n    default=None,\n    /\n)\n</code></pre> <p>Insert key with a value of default if key is not in the dictionary.</p> <p>Return the value for key if key is in the dictionary, else default.</p>"},{"location":"api/tifeatures/settings/#update","title":"update","text":"<pre><code>def update(\n    ...\n)\n</code></pre> <p>D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.</p> <p>If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]</p>"},{"location":"api/tifeatures/settings/#values","title":"values","text":"<pre><code>def values(\n    ...\n)\n</code></pre> <p>D.values() -&gt; an object providing a view on D's values</p>"},{"location":"api/tifeatures/settings/#tablesettings","title":"TableSettings","text":"<pre><code>class TableSettings(\n    __pydantic_self__,\n    _env_file: Union[str, os.PathLike, List[Union[str, os.PathLike]], Tuple[Union[str, os.PathLike], ...], NoneType] = '&lt;object object at 0x7f2a6da83bb0&gt;',\n    _env_file_encoding: Union[str, NoneType] = None,\n    _env_nested_delimiter: Union[str, NoneType] = None,\n    _secrets_dir: Union[str, os.PathLike, NoneType] = None,\n    **values: Any\n)\n</code></pre> <p>Table configuration settings</p>"},{"location":"api/tifeatures/settings/#ancestors-in-mro_2","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.env_settings.BaseSettings</li> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/tifeatures/settings/#class-variables_1","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/tifeatures/settings/#static-methods_1","title":"Static methods","text":""},{"location":"api/tifeatures/settings/#construct_1","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/tifeatures/settings/#from_orm_1","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/settings/#parse_file_1","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/settings/#parse_obj_1","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/settings/#parse_raw_1","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/settings/#schema_1","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/tifeatures/settings/#schema_json_1","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/tifeatures/settings/#update_forward_refs_1","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/tifeatures/settings/#validate_1","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/tifeatures/settings/#methods_2","title":"Methods","text":""},{"location":"api/tifeatures/settings/#copy_2","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/tifeatures/settings/#dict_1","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/tifeatures/settings/#json_1","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/tifeatures/filter/evaluate/","title":"Module tifeatures.filter.evaluate","text":"<p>tifeatures.filter.evaluate.</p>"},{"location":"api/tifeatures/filter/evaluate/#variables","title":"Variables","text":"<pre><code>LITERALS\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#functions","title":"Functions","text":""},{"location":"api/tifeatures/filter/evaluate/#to_filter","title":"to_filter","text":"<pre><code>def to_filter(\n    ast,\n    field_mapping=None\n)\n</code></pre> <p>Helper function to translate ECQL AST to Django Query expressions.</p> <p>Parameters:</p> Name Type Description Default ast :class:<code>Node</code> the abstract syntax tree None field_mapping None a dict mapping from the filter name to the Django field lookup. None mapping_choices None a dict mapping field lookups to choices. None <p>Returns:</p> Type Description :class:<code>django.db.models.Q</code> a Django query object"},{"location":"api/tifeatures/filter/evaluate/#classes","title":"Classes","text":""},{"location":"api/tifeatures/filter/evaluate/#buildpgevaluator","title":"BuildPGEvaluator","text":"<pre><code>class BuildPGEvaluator(\n    field_mapping\n)\n</code></pre> <p>Base class for AST evaluators.</p>"},{"location":"api/tifeatures/filter/evaluate/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>pygeofilter.backends.evaluator.Evaluator</li> </ul>"},{"location":"api/tifeatures/filter/evaluate/#class-variables","title":"Class variables","text":"<pre><code>handler_map\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#methods","title":"Methods","text":""},{"location":"api/tifeatures/filter/evaluate/#adopt","title":"adopt","text":"<pre><code>def adopt(\n    self,\n    node,\n    *sub_args\n)\n</code></pre> <p>Interface function for a last resort when trying to evaluate a node</p> <p>and no handler was found.</p>"},{"location":"api/tifeatures/filter/evaluate/#adopt_result","title":"adopt_result","text":"<pre><code>def adopt_result(\n    self,\n    result: Any\n) -&gt; Any\n</code></pre> <p>Interface function for adopting the final evaluation result</p> <p>if necessary.  Default is no-op.</p>"},{"location":"api/tifeatures/filter/evaluate/#arithmetic","title":"arithmetic","text":"<pre><code>def arithmetic(\n    self,\n    node,\n    lhs,\n    rhs\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#attribute","title":"attribute","text":"<pre><code>def attribute(\n    self,\n    node\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#bbox","title":"bbox","text":"<pre><code>def bbox(\n    self,\n    node,\n    lhs\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#between","title":"between","text":"<pre><code>def between(\n    self,\n    node,\n    lhs,\n    low,\n    high\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#combination","title":"combination","text":"<pre><code>def combination(\n    self,\n    node,\n    lhs,\n    rhs\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#comparison","title":"comparison","text":"<pre><code>def comparison(\n    self,\n    node,\n    lhs,\n    rhs\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#envelope","title":"envelope","text":"<pre><code>def envelope(\n    self,\n    node\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#evaluate","title":"evaluate","text":"<pre><code>def evaluate(\n    self,\n    node: Union[ForwardRef('Node'), pygeofilter.values.Geometry, pygeofilter.values.Envelope, datetime.date, datetime.datetime, datetime.timedelta, pygeofilter.values.Interval, bool, float, int, str, list],\n    adopt_result: bool = True\n) -&gt; Any\n</code></pre> <p>Recursive function to evaluate an abstract syntax tree.</p> <p>For every node in the walked syntax tree, its registered handler is called with the node as first parameter and all pre-evaluated child nodes as star-arguments. When no handler was found for a given node, the <code>adopt</code> function is called with the node and its arguments, which by default raises an <code>NotImplementedError</code>.</p>"},{"location":"api/tifeatures/filter/evaluate/#function","title":"function","text":"<pre><code>def function(\n    self,\n    node,\n    *arguments\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#geometry","title":"geometry","text":"<pre><code>def geometry(\n    self,\n    node\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#in_","title":"in_","text":"<pre><code>def in_(\n    self,\n    node,\n    lhs,\n    *options\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#interval","title":"interval","text":"<pre><code>def interval(\n    self,\n    node,\n    start,\n    end\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#like","title":"like","text":"<pre><code>def like(\n    self,\n    node,\n    lhs\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#literal","title":"literal","text":"<pre><code>def literal(\n    self,\n    node\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#not_","title":"not_","text":"<pre><code>def not_(\n    self,\n    node,\n    sub\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#null","title":"null","text":"<pre><code>def null(\n    self,\n    node,\n    lhs\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#spatial_distance","title":"spatial_distance","text":"<pre><code>def spatial_distance(\n    self,\n    node,\n    lhs,\n    rhs\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#spatial_operation","title":"spatial_operation","text":"<pre><code>def spatial_operation(\n    self,\n    node,\n    lhs,\n    rhs\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#spatial_pattern","title":"spatial_pattern","text":"<pre><code>def spatial_pattern(\n    self,\n    node,\n    lhs,\n    rhs\n)\n</code></pre>"},{"location":"api/tifeatures/filter/evaluate/#temporal","title":"temporal","text":"<pre><code>def temporal(\n    self,\n    node,\n    lhs,\n    rhs\n)\n</code></pre>"},{"location":"api/tifeatures/filter/filters/","title":"Module tifeatures.filter.filters","text":"<p>tifeatures.filter.filters</p>"},{"location":"api/tifeatures/filter/filters/#variables","title":"Variables","text":"<pre><code>UNITS_LOOKUP\n</code></pre>"},{"location":"api/tifeatures/filter/filters/#functions","title":"Functions","text":""},{"location":"api/tifeatures/filter/filters/#attribute","title":"attribute","text":"<pre><code>def attribute(\n    name: str,\n    fields: List[str]\n)\n</code></pre> <p>Create an attribute lookup expression using a field mapping dictionary.</p> <p>Parameters:</p> Name Type Description Default name None the field filter name None field_mapping None the dictionary to use as a lookup. None"},{"location":"api/tifeatures/filter/filters/#bbox","title":"bbox","text":"<pre><code>def bbox(\n    lhs,\n    minx,\n    miny,\n    maxx,\n    maxy,\n    crs: int = 4326\n)\n</code></pre> <p>Create a bounding box filter for the given spatial attribute.</p> <p>Parameters:</p> Name Type Description Default lhs None the field to compare None minx None the lower x part of the bbox None miny None the lower y part of the bbox None maxx None the upper x part of the bbox None maxy None the upper y part of the bbox None crs None the CRS the bbox is expressed in None <p>Returns:</p> Type Description None a comparison expression object"},{"location":"api/tifeatures/filter/filters/#bbox_to_wkt","title":"bbox_to_wkt","text":"<pre><code>def bbox_to_wkt(\n    bbox: List[float],\n    srid: int = 4326\n) -&gt; str\n</code></pre> <p>Return WKT representation of a BBOX.</p>"},{"location":"api/tifeatures/filter/filters/#between","title":"between","text":"<pre><code>def between(\n    lhs,\n    low,\n    high,\n    negate=False\n)\n</code></pre> <p>Create a filter to match elements that have a value within a certain range.</p> <p>Parameters:</p> Name Type Description Default lhs None the field to compare None low None the lower value of the range None high None the upper value of the range None not_ None whether the range shall be inclusive (the default) or exclusive None <p>Returns:</p> Type Description None a comparison expression object"},{"location":"api/tifeatures/filter/filters/#combine","title":"combine","text":"<pre><code>def combine(\n    sub_filters,\n    combinator: str = 'AND'\n)\n</code></pre> <p>Combine filters using a logical combinator</p> <p>Parameters:</p> Name Type Description Default sub_filters None the filters to combine None combinator None a string: \"AND\" / \"OR\" None <p>Returns:</p> Type Description None the combined filter"},{"location":"api/tifeatures/filter/filters/#func","title":"func","text":"<pre><code>def func(\n    name,\n    *args\n)\n</code></pre> <p>Return results of running SQL function with arguments.</p>"},{"location":"api/tifeatures/filter/filters/#like","title":"like","text":"<pre><code>def like(\n    lhs,\n    rhs,\n    case=False,\n    negate=False\n)\n</code></pre> <p>Create a filter to filter elements according to a string attribute using wildcard expressions.</p> <p>Parameters:</p> Name Type Description Default lhs None the field to compare None rhs None the wildcard pattern: a string containing any number of '%' characters as wildcards. None case None whether the lookup shall be done case sensitively or not None not_ None whether the range shall be inclusive (the default) or exclusive None <p>Returns:</p> Type Description None a comparison expression object"},{"location":"api/tifeatures/filter/filters/#literal","title":"literal","text":"<pre><code>def literal(\n    value\n)\n</code></pre> <p>literal value.</p>"},{"location":"api/tifeatures/filter/filters/#negate","title":"negate","text":"<pre><code>def negate(\n    sub_filter\n)\n</code></pre> <p>Negate a filter, opposing its meaning.</p> <p>Parameters:</p> Name Type Description Default sub_filter None the filter to negate None <p>Returns:</p> Type Description None the negated filter"},{"location":"api/tifeatures/filter/filters/#parse_geometry","title":"parse_geometry","text":"<pre><code>def parse_geometry(\n    geom: Dict[str, Any]\n) -&gt; str\n</code></pre> <p>Parse geometry object and return WKT.</p>"},{"location":"api/tifeatures/filter/filters/#quote_ident","title":"quote_ident","text":"<pre><code>def quote_ident(\n    s: str\n) -&gt; str\n</code></pre> <p>quote.</p>"},{"location":"api/tifeatures/filter/filters/#runop","title":"runop","text":"<pre><code>def runop(\n    lhs,\n    rhs=None,\n    op: str = '=',\n    negate: bool = False\n)\n</code></pre> <p>Compare a filter with an expression using a comparison operation.</p> <p>Parameters:</p> Name Type Description Default lhs None the field to compare None rhs None the filter expression None op None a string denoting the operation. None <p>Returns:</p> Type Description None a comparison expression object"},{"location":"api/tifeatures/filter/filters/#spatial","title":"spatial","text":"<pre><code>def spatial(\n    lhs,\n    rhs,\n    op,\n    pattern=None,\n    distance=None,\n    units=None\n)\n</code></pre> <p>Create a spatial filter for the given spatial attribute.</p> <p>Parameters:</p> Name Type Description Default lhs None the field to compare None rhs None the time instant or time span to use as a filter None op None the comparison operation. one of <code>\"INTERSECTS\"</code>, <code>\"DISJOINT\"</code>, `\"CONTAINS\"<code>,</code>\"WITHIN\"<code>,</code>\"TOUCHES\"<code>,</code>\"CROSSES\"<code>,</code>\"OVERLAPS\"<code>,</code>\"EQUALS\"<code>,</code>\"RELATE\"<code>,</code>\"DWITHIN\"<code>,</code>\"BEYOND\"`` None pattern None the spatial relation pattern None distance None the distance value for distance based lookups: <code>\"DWITHIN\"</code> and <code>\"BEYOND\"</code> None units None the units the distance is expressed in None <p>Returns:</p> Type Description None a comparison expression object"},{"location":"api/tifeatures/filter/filters/#temporal","title":"temporal","text":"<pre><code>def temporal(\n    lhs,\n    time_or_period,\n    op\n)\n</code></pre> <p>Create a temporal filter for the given temporal attribute.</p> <p>Parameters:</p> Name Type Description Default lhs :class:<code>django.db.models.F</code> the field to compare None time_or_period :class:<code>datetime.datetime</code> or a tuple of two datetimes or a tuple of one datetime and one :class:<code>datetime.timedelta</code> the time instant or time span to use as a filter None op str the comparison operation. one of <code>\"BEFORE\"</code>, <code>\"BEFORE OR DURING\"</code>, <code>\"DURING\"</code>, <code>\"DURING OR AFTER\"</code>, <code>\"AFTER\"</code>. None <p>Returns:</p> Type Description :class:<code>django.db.models.Q</code> a comparison expression object"},{"location":"api/tifeatures/filter/filters/#classes","title":"Classes","text":""},{"location":"api/tifeatures/filter/filters/#operator","title":"Operator","text":"<pre><code>class Operator(\n    operator: str = None\n)\n</code></pre> <p>Filter Operators.</p>"},{"location":"api/tifeatures/filter/filters/#class-variables","title":"Class variables","text":"<pre><code>OPERATORS\n</code></pre>"},{"location":"api/tifeatures/resources/enums/","title":"Module tifeatures.resources.enums","text":"<p>tifeatures enums.</p>"},{"location":"api/tifeatures/resources/enums/#classes","title":"Classes","text":""},{"location":"api/tifeatures/resources/enums/#filterlang","title":"FilterLang","text":"<pre><code>class FilterLang(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>filter language.</p> <p>ref: github.com/radiantearth/stac-api-spec/tree/master/fragments/filter#get-query-parameters-and-post-json-fields</p>"},{"location":"api/tifeatures/resources/enums/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.str</li> <li>enum.Enum</li> </ul>"},{"location":"api/tifeatures/resources/enums/#class-variables","title":"Class variables","text":"<pre><code>cql2_json\n</code></pre> <pre><code>cql2_text\n</code></pre> <pre><code>name\n</code></pre> <pre><code>value\n</code></pre>"},{"location":"api/tifeatures/resources/enums/#itemresponsetype","title":"ItemResponseType","text":"<pre><code>class ItemResponseType(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Response Type Enums.</p>"},{"location":"api/tifeatures/resources/enums/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.str</li> <li>enum.Enum</li> </ul>"},{"location":"api/tifeatures/resources/enums/#class-variables_1","title":"Class variables","text":"<pre><code>geojson\n</code></pre> <pre><code>html\n</code></pre> <pre><code>json\n</code></pre> <pre><code>name\n</code></pre> <pre><code>value\n</code></pre>"},{"location":"api/tifeatures/resources/enums/#itemsresponsetype","title":"ItemsResponseType","text":"<pre><code>class ItemsResponseType(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Response Type Enums.</p>"},{"location":"api/tifeatures/resources/enums/#ancestors-in-mro_2","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.str</li> <li>enum.Enum</li> </ul>"},{"location":"api/tifeatures/resources/enums/#class-variables_2","title":"Class variables","text":"<pre><code>csv\n</code></pre> <pre><code>geojson\n</code></pre> <pre><code>geojsonseq\n</code></pre> <pre><code>html\n</code></pre> <pre><code>json\n</code></pre> <pre><code>name\n</code></pre> <pre><code>ndjson\n</code></pre> <pre><code>value\n</code></pre>"},{"location":"api/tifeatures/resources/enums/#mediatype","title":"MediaType","text":"<pre><code>class MediaType(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Responses Media types formerly known as MIME types.</p>"},{"location":"api/tifeatures/resources/enums/#ancestors-in-mro_3","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.str</li> <li>enum.Enum</li> </ul>"},{"location":"api/tifeatures/resources/enums/#class-variables_3","title":"Class variables","text":"<pre><code>csv\n</code></pre> <pre><code>geojson\n</code></pre> <pre><code>geojsonseq\n</code></pre> <pre><code>html\n</code></pre> <pre><code>json\n</code></pre> <pre><code>name\n</code></pre> <pre><code>ndjson\n</code></pre> <pre><code>openapi30_json\n</code></pre> <pre><code>openapi30_yaml\n</code></pre> <pre><code>schemajson\n</code></pre> <pre><code>text\n</code></pre> <pre><code>value\n</code></pre> <pre><code>xml\n</code></pre>"},{"location":"api/tifeatures/resources/enums/#queryablesresponsetype","title":"QueryablesResponseType","text":"<pre><code>class QueryablesResponseType(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Response Type Enums.</p>"},{"location":"api/tifeatures/resources/enums/#ancestors-in-mro_4","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.str</li> <li>enum.Enum</li> </ul>"},{"location":"api/tifeatures/resources/enums/#class-variables_4","title":"Class variables","text":"<pre><code>html\n</code></pre> <pre><code>name\n</code></pre> <pre><code>schemajson\n</code></pre> <pre><code>value\n</code></pre>"},{"location":"api/tifeatures/resources/enums/#responsetype","title":"ResponseType","text":"<pre><code>class ResponseType(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Response Type Enums.</p>"},{"location":"api/tifeatures/resources/enums/#ancestors-in-mro_5","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.str</li> <li>enum.Enum</li> </ul>"},{"location":"api/tifeatures/resources/enums/#class-variables_5","title":"Class variables","text":"<pre><code>html\n</code></pre> <pre><code>json\n</code></pre> <pre><code>name\n</code></pre> <pre><code>value\n</code></pre>"},{"location":"api/tifeatures/resources/response/","title":"Module tifeatures.resources.response","text":"<p>tifeatures custom responses.</p>"},{"location":"api/tifeatures/resources/response/#classes","title":"Classes","text":""},{"location":"api/tifeatures/resources/response/#geojsonresponse","title":"GeoJSONResponse","text":"<pre><code>class GeoJSONResponse(\n    content: Any,\n    status_code: int = 200,\n    headers: Union[Dict[str, str], NoneType] = None,\n    media_type: Union[str, NoneType] = None,\n    background: Union[starlette.background.BackgroundTask, NoneType] = None\n)\n</code></pre> <p>GeoJSON Response</p>"},{"location":"api/tifeatures/resources/response/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>fastapi.responses.ORJSONResponse</li> <li>starlette.responses.JSONResponse</li> <li>starlette.responses.Response</li> </ul>"},{"location":"api/tifeatures/resources/response/#class-variables","title":"Class variables","text":"<pre><code>charset\n</code></pre> <pre><code>media_type\n</code></pre>"},{"location":"api/tifeatures/resources/response/#instance-variables","title":"Instance variables","text":"<pre><code>headers\n</code></pre>"},{"location":"api/tifeatures/resources/response/#methods","title":"Methods","text":""},{"location":"api/tifeatures/resources/response/#delete_cookie","title":"delete_cookie","text":"<pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = '/',\n    domain: Union[str, NoneType] = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: Union[Literal['lax', 'strict', 'none'], NoneType] = 'lax'\n) -&gt; None\n</code></pre>"},{"location":"api/tifeatures/resources/response/#init_headers","title":"init_headers","text":"<pre><code>def init_headers(\n    self,\n    headers: Union[Mapping[str, str], NoneType] = None\n) -&gt; None\n</code></pre>"},{"location":"api/tifeatures/resources/response/#render","title":"render","text":"<pre><code>def render(\n    self,\n    content: Any\n) -&gt; bytes\n</code></pre>"},{"location":"api/tifeatures/resources/response/#set_cookie","title":"set_cookie","text":"<pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = '',\n    max_age: Union[int, NoneType] = None,\n    expires: Union[datetime.datetime, str, int, NoneType] = None,\n    path: str = '/',\n    domain: Union[str, NoneType] = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: Union[Literal['lax', 'strict', 'none'], NoneType] = 'lax'\n) -&gt; None\n</code></pre>"},{"location":"api/tifeatures/resources/response/#schemajsonresponse","title":"SchemaJSONResponse","text":"<pre><code>class SchemaJSONResponse(\n    content: Any,\n    status_code: int = 200,\n    headers: Union[Dict[str, str], NoneType] = None,\n    media_type: Union[str, NoneType] = None,\n    background: Union[starlette.background.BackgroundTask, NoneType] = None\n)\n</code></pre> <p>Schema Response</p>"},{"location":"api/tifeatures/resources/response/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>fastapi.responses.ORJSONResponse</li> <li>starlette.responses.JSONResponse</li> <li>starlette.responses.Response</li> </ul>"},{"location":"api/tifeatures/resources/response/#class-variables_1","title":"Class variables","text":"<pre><code>charset\n</code></pre> <pre><code>media_type\n</code></pre>"},{"location":"api/tifeatures/resources/response/#instance-variables_1","title":"Instance variables","text":"<pre><code>headers\n</code></pre>"},{"location":"api/tifeatures/resources/response/#methods_1","title":"Methods","text":""},{"location":"api/tifeatures/resources/response/#delete_cookie_1","title":"delete_cookie","text":"<pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = '/',\n    domain: Union[str, NoneType] = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: Union[Literal['lax', 'strict', 'none'], NoneType] = 'lax'\n) -&gt; None\n</code></pre>"},{"location":"api/tifeatures/resources/response/#init_headers_1","title":"init_headers","text":"<pre><code>def init_headers(\n    self,\n    headers: Union[Mapping[str, str], NoneType] = None\n) -&gt; None\n</code></pre>"},{"location":"api/tifeatures/resources/response/#render_1","title":"render","text":"<pre><code>def render(\n    self,\n    content: Any\n) -&gt; bytes\n</code></pre>"},{"location":"api/tifeatures/resources/response/#set_cookie_1","title":"set_cookie","text":"<pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = '',\n    max_age: Union[int, NoneType] = None,\n    expires: Union[datetime.datetime, str, int, NoneType] = None,\n    path: str = '/',\n    domain: Union[str, NoneType] = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: Union[Literal['lax', 'strict', 'none'], NoneType] = 'lax'\n) -&gt; None\n</code></pre>"}]}